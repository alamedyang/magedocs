import{_ as a,o as e,c as l,a as o}from"./app-8J5AkPq7.js";const i={},s=o(`<h1 id="blocks" tabindex="-1"><a class="header-anchor" href="#blocks" aria-hidden="true">#</a> Blocks</h1><p>A basic unit of <a href="../mgs/mgs_natlang_structure">MGS Natlang structure</a>.</p><p>The contents (body) of each <a href="../mgs/mgs_natlang">MGS Natlang</a> block is enclosed in a pair of matching curly braces:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">BLOCK DECLARATION { BLOCK BODY }</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>Some block types can (or must) be nested within others. Note that blocks cannot be nested arbitrarily.</p><h2 id="block-types" tabindex="-1"><a class="header-anchor" href="#block-types" aria-hidden="true">#</a> Block Types</h2><p>The following list includes all block nesting relationships.</p><p>Indented entries can only be used within the parent&#39;s block body. Unindented entries occur at the document root level. Items in parentheses are not blocks themselves, but are used only inside their parent block&#39;s contents.</p><ul><li><a href="../mgs/dialog_settings_block">Dialog Settings Block</a>: <code>settings (for) dialog {}</code><ul><li><a href="../mgs/dialog_settings_target_block">Dialog Settings Target Block</a>: <code>&lt;TARGET&gt; {}</code><ul><li><em>(<a href="../mgs/dialogs_mgs#dialog-parameters">Dialog Parameters</a>)</em></li></ul></li></ul></li><li><a href="../mgs/serial_dialog_settings_block">Serial Dialog Settings Block</a>: <code>settings (for) serial dialog {}</code><ul><li><em>(<a href="../mgs/serial_dialogs_mgs#serial-dialog-parameters">Serial Dialog Parameters</a>)</em></li></ul></li><li><a href="../mgs/dialog_block">Dialog Block</a>: <code>dialog $string {}</code><ul><li><em>(<a href="../mgs/dialogs_mgs">Dialogs</a>)</em></li></ul></li><li><a href="../mgs/serial_dialog_block">Serial Dialog Block</a>: <code>serial dialog $string {}</code><ul><li><em>(<a href="../mgs/serial_dialogs_mgs">Serial Dialogs</a>)</em></li></ul></li><li><a href="../mgs/script_block">Script Block</a>: <code>$string {}</code><ul><li><a href="#combination-blocks">Combination Block</a></li><li><em>(<a href="../actions">Actions</a>)</em></li><li><em>(<a href="../mgs/advanced_syntax#labels">Labels</a>)</em></li></ul></li></ul><p>(<a href="../mgs/advanced_syntax#macros">Macros</a> are not included in the list above.)</p><h2 id="combination-blocks" tabindex="-1"><a class="header-anchor" href="#combination-blocks" aria-hidden="true">#</a> Combination Blocks</h2><p>Inside an <a href="../mgs/mgs_natlang">MGS Natlang</a> <a href="../mgs/script_block">script block</a>, some <a href="../actions">actions</a> can be <strong>combined</strong> with their associated definition <a href="../mgs/blocks">block</a>. In other words, you can &quot;call&quot; a <a href="../dialogs">dialog</a> or <a href="../serial_dialogs">serial dialog</a> and define it in place.</p><p>For combination blocks of all types, a dialog name (<a href="../mgs/variables_mgs#string">string</a>) is optional. Omitting dialog names is recommended to keep things clean.</p><p>Blocks that can be combined:</p><ul><li><a href="../actions/SHOW_DIALOG">SHOW_DIALOG</a> + <a href="../mgs/dialog_block">Dialog Block</a> = <a href="../mgs/dialog_block#show-dialog-block">Show Dialog Block</a></li><li><a href="../actions/SHOW_SERIAL_DIALOG">SHOW_SERIAL_DIALOG</a> + <a href="../mgs/serial_dialog_block">Serial Dialog Block</a> = <a href="../mgs/serial_dialog_block#show-serial-dialog-block">Show Serial Dialog Block</a></li></ul><p>#verifyme -- what about <code>concat serial dialog</code> and <code>set serial connect message</code>? Do they have combination blocks, too?</p>`,16),t=[s];function c(n,r){return e(),l("div",null,t)}const g=a(i,[["render",c],["__file","blocks.html.vue"]]);export{g as default};
