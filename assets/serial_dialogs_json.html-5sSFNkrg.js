import{_ as s,o as a,c as n,a as e}from"./app-oGoBbKgC.js";const o={},l=e(`<h1 id="serial-dialogs-json" tabindex="-1"><a class="header-anchor" href="#serial-dialogs-json" aria-hidden="true">#</a> Serial Dialogs (JSON)</h1><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>With the introduction of <a href="../mgs/mgs_natlang">MGS Natlang</a>, you need not write <a href="../dialogs/serial_dialogs">serial dialogs</a> with JSON, but it still may be useful to understand the JSON structure for debugging purposes. See: <a href="../mgs/serial_dialogs_mgs">Serial Dialogs (MGS)</a></p></div><h2 id="behavior" tabindex="-1"><a class="header-anchor" href="#behavior" aria-hidden="true">#</a> Behavior</h2><p>Dialogs do nothing on their own. To show them, you must use the <a href="../actions/SHOW_SERIAL_DIALOG">SHOW_SERIAL_DIALOG</a> action within a <a href="../scripts">script</a>.</p><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> Format</h2><div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;serialDialog1&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;messages&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;Hi there!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;Each new message&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;gets printed on a&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;new line.&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;serialDialog2&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;messages&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;THIS IS REALLY STRAIGHTFORWARD&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The only default property on serial dialog messages is <code>messages</code>, an array of one or more strings.</p><p>These strings are not hard wrapped by default.</p>`,8),t=[l];function p(r,i){return a(),n("div",null,t)}const D=s(o,[["render",p],["__file","serial_dialogs_json.html.vue"]]);export{D as default};
