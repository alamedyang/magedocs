import{_ as e,o as a,c as s,a as t}from"./app-oGoBbKgC.js";const n={},o=t(`<h1 id="debug-mode" tabindex="-1"><a class="header-anchor" href="#debug-mode" aria-hidden="true">#</a> Debug Mode</h1><p>Debug mode is triggered in-game by pressing <code>XOR</code> and <code>MEM1</code> (the top button on the left of the screen and the second button on the right) at the same time. On desktop: press <code>F1</code> and <code>F6</code> instead.</p><h2 id="debug-entities" tabindex="-1"><a class="header-anchor" href="#debug-entities" aria-hidden="true">#</a> Debug Entities</h2><p>Normally, the Mage Game Engine (MGE) omits <a href="../entities">entities</a> with the <code>is_debug</code> value of <code>true</code> when loading <a href="../maps">maps</a>. Such entities effectively do not exist in &quot;production mode,&quot; and therefore will not be included in the list of entities in the <a href="../hardware/hex_editor">hex editor</a>, will not appear anywhere on the map, cannot be the target of <a href="../scripts">script</a>, etc. #verifyme When debug mode is activated, however, the <a href="../maps/map_loads">current map is reloaded</a> and <code>is_debug</code> entities are included.</p><p>The chapter 1 version of the engine <em>must</em> use debug entities to trigger debug scripts, as the serial <a href="../hardware/terminal">terminal</a> was not implemented yet, and there was not yet an action to check whether debug mode is on.</p><div class="custom-container tip"><p class="custom-container-title">Best Practice</p><p>When making debug entities, it helps a lot to give them dialog describing what they are doing to change the game state. Better still is putting the debug behavior behind a <a href="../dialogs/multiple_choice_dialogs_json">multiple choice dialog</a> so that the debug entity can be disengaged without making any changes in case it is ever engaged by accident.</p></div><h2 id="debug-scripting" tabindex="-1"><a class="header-anchor" href="#debug-scripting" aria-hidden="true">#</a> Debug Scripting</h2><p>New in the chapter 2+ version of the engine is a means of checking whether <a href="../actions/CHECK_DEBUG_MODE">debug mode is on</a>. With this action, you can add additional behavior to your game that is quick to enable when play testing, but hidden from players by default.</p><h3 id="debug-logging" tabindex="-1"><a class="header-anchor" href="#debug-logging" aria-hidden="true">#</a> Debug Logging</h3><p>Example:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">script</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">debug mode</span><span style="color:#D4D4D4;"> is </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;DEBUG INFO!&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>For your convenience, the <code>debug!()</code> was introduced to provide the same behavior but in a much briefer form:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">script</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">debug!</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;DEBUG INFO&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="debug-commands" tabindex="-1"><a class="header-anchor" href="#debug-commands" aria-hidden="true">#</a> Debug Commands</h3><p>You can register debug <a href="../hardware/commands">commands</a> in a map&#39;s <a href="../scripts/on_load"><code>on_load</code></a>, and if you put these registrations behind a check for debug mode, they won&#39;t get in the way of a play tester&#39;s experience.</p><p>We&#39;ve found it useful to include debug logging when such a command is registered — both the name and a brief description of what the command does — so you won&#39;t have trouble remember which commands you&#39;ve prepared for a given map.</p><h2 id="debug-techniques" tabindex="-1"><a class="header-anchor" href="#debug-techniques" aria-hidden="true">#</a> Debug Techniques</h2><h3 id="cutscene-skippers" tabindex="-1"><a class="header-anchor" href="#cutscene-skippers" aria-hidden="true">#</a> Cutscene Skippers</h3><p>When debugging later segments of the game, it&#39;s helpful to be able to trigger a script that bypasses otherwise-mandatory <a href="../techniques/cutscenes">cutscenes</a>. Such debug scripts should carefully mirror their real counterparts in terms of <a href="../scripts/save_flags">save flags</a> set and the like, or you might find yourself having to debug the debuggers.</p><h3 id="cutscene-restorers" tabindex="-1"><a class="header-anchor" href="#cutscene-restorers" aria-hidden="true">#</a> Cutscene Restorers</h3><p>Likewise, it sometimes helps to be able to play a cutscene over again. Or, if most or all <a href="../techniques/cutscenes">cutscenes</a> have been bypassed, it helps to turn on a specific one separately.</p><h3 id="clean-wipe" tabindex="-1"><a class="header-anchor" href="#clean-wipe" aria-hidden="true">#</a> Clean Wipe</h3><p>When using scripts to emulate a fresh game state, be sure you have a good list of the <a href="../scripts/save_flags">save flags</a> and <a href="../scripts/integer_variables">integer variables</a> (etc.) you have been using.</p><h3 id="puzzle-solvers" tabindex="-1"><a class="header-anchor" href="#puzzle-solvers" aria-hidden="true">#</a> Puzzle Solvers</h3><p>While some puzzles can be simplified to accelerate play testing (such as naming the main character &quot;Bub&quot; when they will later need to be named &quot;Bob&quot;), it&#39;s much faster to make scripts to solve puzzles for you.</p><p>By the end of game development in BMG2020, there was a &quot;Debug Exa&quot; capable of solving or partially solving the majority of puzzles.</p><h3 id="choreography-controller" tabindex="-1"><a class="header-anchor" href="#choreography-controller" aria-hidden="true">#</a> Choreography Controller</h3><p>Whenever you have a small segment of choreography you want to polish, it helps to split the sequence into a separate script that you can trigger at will.</p>`,28),i=[o];function r(c,d){return a(),s("div",null,i)}const h=e(n,[["render",r],["__file","debug_mode.html.vue"]]);export{h as default};
