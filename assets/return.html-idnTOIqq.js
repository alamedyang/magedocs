import{_ as e,o as t,c as a,a as r}from"./app-oGoBbKgC.js";const n={},o=r('<h1 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h1><p>Advanced <a href="../../mgs/mgs_natlang">MGS Natlang</a> syntax (specifically for <a href="../../mgs/scripts_mgs">MGS Natlang scripts</a>).</p><p><code>return</code> is a keyword that will end the current <a href="../../scripts">script</a> early. (It simply sets the action index past the end of the script, causing it to immediately end.)</p><p>This will not prevent <a href="../../scripts/on_tick"><code>on_tick</code></a> scripts from looping on the next game tick, however; if you want to stop an <code>on_tick</code> script for good, you must explicitly <a href="../../RUN_SCRIPT">goto</a> <code>null_script</code>.</p><h2 id="returning-a-value" tabindex="-1"><a class="header-anchor" href="#returning-a-value" aria-hidden="true">#</a> Returning a value</h2><p>This keyword will not &quot;return&quot; a value to the script&#39;s &quot;caller.&quot;</p><p>If you want to emulate value-returning behavior, you might try assigning a value to a common variable as a script&#39;s last action, then have another script <a href="../../actions/COPY_SCRIPT">COPY_SCRIPT</a> it and use the common variable like normal.</p>',7),i=[o];function s(c,l){return t(),a("div",null,i)}const u=e(n,[["render",s],["__file","return.html.vue"]]);export{u as default};
