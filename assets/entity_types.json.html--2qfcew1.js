import{_ as t,r as p,o as c,c as i,b as s,d as n,e as o,w as l,a}from"./app-MrF-XoWp.js";const D={},r=a('<h1 id="entity-types-json" tabindex="-1"><a class="header-anchor" href="#entity-types-json" aria-hidden="true">#</a> <code>entity_types.json</code></h1><p>Found in <a href="../getting_started/scenario_source_files"><code>scenario_source_files</code></a>.</p><p>This JSON file defines each <code>entity_type</code> name for each <a href="../entities/entity_types#character-entity">character entity</a>, plus:</p>',3),y=s("li",null,[s("code",null,"tileset"),n(": their tileset JSON file path")],-1),d=s("li",null,[s("code",null,"portrait"),n(": the name of their portrait image, if not the same as their "),s("code",null,"entity_type"),n(" name (optional)")],-1),u=s("code",null,"animations",-1),h=a(`<p>As an example (keeping in mind that the animation arrays have been closed so the overall structure is more clear):</p><div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">{</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;mage&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;tileset&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;entity-mage.json&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;animations&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;idle&quot;</span><span style="color:#D4D4D4;">: [],</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;walk&quot;</span><span style="color:#D4D4D4;">: [],</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;action&quot;</span><span style="color:#D4D4D4;">: []</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">&quot;bender_sadbutt&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;tileset&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;entity-bender_sadbutt.json&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;portrait&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;bender&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;animations&quot;</span><span style="color:#D4D4D4;">: {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;idle&quot;</span><span style="color:#D4D4D4;">: [],</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;walk&quot;</span><span style="color:#D4D4D4;">: [],</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;action&quot;</span><span style="color:#D4D4D4;">: [],</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#9CDCFE;">&quot;bite&quot;</span><span style="color:#D4D4D4;">: []</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="animations" tabindex="-1"><a class="header-anchor" href="#animations" aria-hidden="true">#</a> Animations</h3>`,3),C=s("a",{href:"../entities"},"entity",-1),_=s("a",{href:"../tilesets/animations"},"animations",-1),q=a(`<div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">&quot;idle&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;tileid&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">18</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;flip_x&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;tileid&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;flip_x&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">true</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;tileid&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">17</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;flip_x&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;tileid&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#B5CEA8;">16</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;flip_x&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">false</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><p>When animations are created within Tiled, they are assigned to a tile on the tileset. So for the above definitions, <code>tileid</code> refers to which tile the animation has been assigned to.</p><p>To find the <code>tileid</code>, count left-to-right and top-to-down, but remember to count starting from 0 instead of 1. Alternatively, you can select the correct tile in Tiled and see the tile ID that way.</p><p><code>flip_x</code> will flip the sprites horizontally (and <code>flip_y</code> will flip vertically), but will otherwise make no changes to the animation on that tile.</p><p>The order of the object literals in the animation is fixed:</p><ul><li>North</li><li>East</li><li>South</li><li>West</li></ul><p>Each character entity should at least have an idle, walk, and action animation. (See: <a href="../tilesets/animations">Animations</a>)</p>`,7);function m(f,E){const e=p("RouterLink");return c(),i("div",null,[r,s("ul",null,[y,d,s("li",null,[u,n(": their "),o(e,{to:"/tilesets/entity_management_system.html"},{default:l(()=>[n("animation assignments")]),_:1})])]),h,s("p",null,[n("This part is much easier to do using the "),o(e,{to:"/encoder.html#web-encoder"},{default:l(()=>[n("web encoder")]),_:1}),n(", but if you want to make changes to an "),C,n("'s "),_,n(" by hand, the structure is as follows:")]),q])}const F=t(D,[["render",m],["__file","entity_types.json.html.vue"]]);export{F as default};
