import{_ as a,o as e,c as s,a as n}from"./app-7-tBH-Mq.js";const o={},l=n(`<h1 id="mgs-natlang" tabindex="-1"><a class="header-anchor" href="#mgs-natlang" aria-hidden="true">#</a> MGS Natlang</h1><p>Introducing &quot;MageGameScript Natlang&quot; — a simplified approach to writing game content for the DC801 Black Mage Game Engine (MGE).</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// example script</span></span>
<span class="line"><span style="color:#DCDCAA;">on_load-wopr</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">turn</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">player control</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">off</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">walk</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">%PLAYER%</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> along </span><span style="color:#9CDCFE;">geometry</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">walkline</span><span style="color:#D4D4D4;"> over </span><span style="color:#B5CEA8;">600ms</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">wait</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">400ms</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">turn</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">player control</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">on</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">PLAYER</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Whoa! It looks like I found some kind of back door.&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">flag</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">backdoor-found</span><span style="color:#D4D4D4;"> to </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="overview" tabindex="-1"><a class="header-anchor" href="#overview" aria-hidden="true">#</a> Overview</h2><p>MGS Natlang is a &quot;natural&quot; language meant to be easy to read and write. It consists of phrases that correlate to the shape of JSON required by the MGE encoder, plus QOL syntax like <code>if</code>/<code>else</code> and <a href="../mgs/show_dialog_block">define-in-place dialogs</a>.</p><p>All MGS files are turned into JSON by the <a href="../encoder/mge_encoder">MGE encoder</a>. Unlike <a href="../scripts/scripts_json">JSON script files</a> and <a href="../dialogs/dialogs_json">JSON dialog files</a>, you don&#39;t need to declare MGS files in the game&#39;s <a href="../structure/scenario.json"><code>scenario.json</code></a>; all MGS files inside <a href="../getting_started/scenario_source_files"><code>scenario_source_files</code></a> will be imported.</p><p>See: <a href="../mgs/mgs_natlang_vs_json">MGS Natlang vs JSON</a></p><h3 id="always-in-progress" tabindex="-1"><a class="header-anchor" href="#always-in-progress" aria-hidden="true">#</a> Always in Progress</h3><p>The Natlang source code is kept within the DC801 black mage game repo, under <code>SD_Card/MAGE/editor/dependencies/natlang-parser/</code></p><p>Natlang is under active development, and the grammar may be updated — sometimes dramatically — in tandem with the badge game source code. The Natlang parser will inform you when it has encountered a syntax error, but always be prepared to consult the documentation (which is generated procedurally based on the current syntax definitions) when writing something!</p><h3 id="syntax-features" tabindex="-1"><a class="header-anchor" href="#syntax-features" aria-hidden="true">#</a> Syntax Features</h3><ol><li>White space agnostic. <ul><li>The syntax coloring might break if you are very creative with line breaks, but it should still parse correctly.</li></ul></li><li>Many strings can be unquoted or quoted freely. <ul><li>Double (<code>&quot;</code>) or single (<code>&#39;</code>) quotes are both fine. (Though a #potentialchange is making double quotes mandatory, and possibly using the single quotes for something else. Best stick with double quotes for now.)</li><li>Anything with a space or any unusual character <em>must</em> be wrapped in quotes.</li></ul></li><li>Some words are optional, and can be included either to increase logical clarity or omitted to decrease word density. E.g. the following two patterns are equivalent phrases: <ul><li><code>goto script scriptName;</code></li><li><code>goto scriptName;</code></li></ul></li><li>Certain <a href="../mgs/variables_mgs">MGS Natlang variables</a> can be formatted in multiple, human-friendly ways, e.g. <ul><li>Duration: <code>1000ms</code> or <code>1s</code> or <code>1000</code></li><li>Quantity: <code>once</code> or <code>1x</code> or <code>1</code></li></ul></li></ol><h3 id="ide-support" tabindex="-1"><a class="header-anchor" href="#ide-support" aria-hidden="true">#</a> IDE Support</h3><p>We have provided syntax colors for a variety of text editors an IDEs, but particularly for Visual Studio Code. See: <a href="../mgs/syntax_colors">Syntax Colors</a></p><p>A language server for Visual Studio Code is on the horizon.</p><h2 id="in-depth-info" tabindex="-1"><a class="header-anchor" href="#in-depth-info" aria-hidden="true">#</a> In-Depth Info</h2><ul><li><a href="../mgs/mgs_natlang_structure">MGS Natlang Structure</a></li><li><a href="../mgs/block">Block</a></li><li><a href="../mgs/combination_block">Combination Block</a></li><li><a href="../mgs/advanced_mgs_natlang_syntax">Advanced MGS Natlang Syntax</a></li></ul>`,17),t=[l];function r(i,p){return e(),s("div",null,t)}const d=a(o,[["render",r],["__file","mgs_natlang.html.vue"]]);export{d as default};
