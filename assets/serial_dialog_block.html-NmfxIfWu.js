import{_ as a,o as s,c as e,a as l}from"./app-oyGKrQVR.js";const n={},o=l(`<h1 id="serial-dialog-block" tabindex="-1"><a class="header-anchor" href="#serial-dialog-block" aria-hidden="true">#</a> Serial Dialog Block</h1><p>To define an <a href="../mgs/mgs_natlang">MGS Natlang</a> <a href="../serial_dialogs">serial dialog</a>, start a new <a href="../mgs/blocks">block</a> at the root level:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">serial dialog $string {}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>Similar to <a href="../mgs/dialog_block">dialog blocks</a>, serial dialog blocks allow you to name and populate a serial dialog. Serial dialogs are shown in the serial console instead of the badge&#39;s physical screen.</p><p>These blocks aren&#39;t being defined inside a <a href="../mgs/script_block">script body</a>, so a serial dialog name is required. (The name is whatever is given for <a href="../mgs/variables_mgs#string">string</a>.)</p><p>Inside the curly braces may be any number of <a href="../mgs/serial_dialogs_mgs">serial dialogs</a>. For example:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">serial dialog</span><span style="color:#9CDCFE;"> bootupTalk</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Bootup sequence completed!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The pair to the above usage is the action <a href="../actions/SHOW_SERIAL_DIALOG">SHOW_SERIAL_DIALOG</a>:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bootupTalk</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Defining the serial dialog externally and &quot;calling&quot; it within a script by name is comparable to what has to be done with game files in raw JSON.</p><h2 id="show-serial-dialog-block" tabindex="-1"><a class="header-anchor" href="#show-serial-dialog-block" aria-hidden="true">#</a> Show Serial Dialog Block</h2><p>A <a href="../mgs/blocks#combination-blocks">combination</a> of the action <a href="../actions/SHOW_SERIAL_DIALOG">SHOW_SERIAL_DIALOG</a> and a serial dialog block:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">show serial dialog $serialDialogName:string {}</span></span>
<span class="line"><span style="color:#D4D4D4;">// or</span></span>
<span class="line"><span style="color:#D4D4D4;">show serial dialog {}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>Inside the curly braces may be any number of <a href="../mgs/serial_dialogs_mgs">serial dialogs</a>.</p><p>This block can be defined with or without a serial dialog name (whatever is given for <a href="../mgs/variables_mgs#string">string</a>). When a serial dialog name isn&#39;t given, one is generated based on the file name and line number. (Providing a name means other scripts are able to refer to that serial dialog, too, but this is rarely necessary.)</p><p>Both patterns are valid anywhere <a href="../actions">actions</a> are allowed (i.e. inside <a href="../mgs/script_block">script blocks</a>).</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;Bootup sequence completed!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div>`,17),i=[o];function r(p,t){return s(),e("div",null,i)}const d=a(n,[["render",r],["__file","serial_dialog_block.html.vue"]]);export{d as default};
