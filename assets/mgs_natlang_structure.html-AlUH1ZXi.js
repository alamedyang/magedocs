import{_ as a,o as s,c as n,a as e}from"./app-j-XjLWpf.js";const l={},o=e(`<h1 id="mgs-natlang-structure" tabindex="-1"><a class="header-anchor" href="#mgs-natlang-structure" aria-hidden="true">#</a> MGS Natlang Structure</h1><p>Because <a href="../mgs/mgs_natlang">MGS Natlang</a> is white space agnostic, formatting is flexible.</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// all these are equally valid:</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">scriptName</span><span style="color:#D4D4D4;">{</span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;">{</span><span style="color:#4EC9B0;">Bob</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello World!&quot;</span><span style="color:#D4D4D4;">}}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">scriptName</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#4EC9B0;">Bob</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hello World!&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">scriptName</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Bob</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;Hello World!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Commonly, Natlang syntax involves declarations followed by matching pairs of brackets:</p><ul><li><a href="../mgs/blocks">Blocks</a>: <code>BLOCK {}</code></li><li><a href="../mgs/advanced_syntax#macros">Macros</a>: <code>MACRO!()</code></li></ul><p>Free form phrases often have a known size, such as actions within a script block (with limited numbers of possible arrangements) or dialog parameters (which always appear in pairs). In such cases, terminating characters or brackets are not used.</p><p>…However, due to an increasing desire for complex syntax parsing, terminating or separating characters is being gradually introduced. As of August 2024, this is limited to semicolons (<code>;</code>) being used to mark the end of an action, e.g. <code>save slot 4;</code></p><h2 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><p>See: <a href="../mgs/variables_mgs">Variables (MGS)</a></p><p>MGS Natlang variables are more strict (and complicated) than the JSON/JavaScript equivalents. For example, in some cases, a <a href="../mgs/variables_mgs#bareword">bareword</a> string may be required when the JSON version might have accepted any type of JS string.</p><p>In all &quot;dictionary&quot; syntax definitions in this documentation, words in parentheses are optional, and words starting with dollar signs are <a href="../mgs/variables_mgs">MGS Natlang variables</a>.</p><h2 id="comments" tabindex="-1"><a class="header-anchor" href="#comments" aria-hidden="true">#</a> Comments</h2><p>MGS Natlang supports two kinds of comments. Both can appear anywhere in an MGS file and inside any <a href="../mgs/blocks">block</a>.</p><h3 id="line-comment" tabindex="-1"><a class="header-anchor" href="#line-comment" aria-hidden="true">#</a> Line comment</h3><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">testScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">wait</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1000ms</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">wait</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1000ms</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// line comment</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>This is the only time that line breaks are syntactic in Natlang. Line comments start with <code>//</code> and end either with a line break or the end of the document.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Do not use line comments in a file that is to be referenced by <a href="advanced_syntax#include"><code>include!()</code></a>! Such files have their line breaks changed to spaces when copied into the secondary file — this is done so that the secondary file&#39;s line numbers can remain intact for error handling. As a result, line comments are never terminated, and whole swaths of code might be lost, which can result in a wide range of baffling encoder errors. (This will be fixed eventually, but is not fixed as of August 2024. Be ye warned!)</p></div><p>Fun fact: the MGS Natlang translator (JSON -&gt; Natlang) will take <a href="../comments">extraneous properties from actions</a> and the like and turn them into line comments automatically.</p><h3 id="block-comment" tabindex="-1"><a class="header-anchor" href="#block-comment" aria-hidden="true">#</a> Block comment</h3><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">Block comment:</span></span>
<span class="line"><span style="color:#6A9955;">Everything inside is a comment!</span></span>
<span class="line"><span style="color:#6A9955;">The lexer ignores it all! WHEEE</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span></code></pre></div><p>Anything between a <code>/*</code> and a <code>*/</code> is part of the block comment, allowing you to put line breaks and/or extensive text inside a comment.</p>`,21),t=[o];function r(c,i){return s(),n("div",null,t)}const d=a(l,[["render",r],["__file","mgs_natlang_structure.html.vue"]]);export{d as default};
