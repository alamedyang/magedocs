import{_ as s,o as a,c as e,a as l}from"./app-oGoBbKgC.js";const n={},o=l(`<h1 id="dialog-settings-block" tabindex="-1"><a class="header-anchor" href="#dialog-settings-block" aria-hidden="true">#</a> Dialog Settings Block</h1><p>One of the root level <a href="../mgs/block">blocks</a> in <a href="../mgs/mgs_natlang">MGS Natlang</a>.</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">settings</span><span style="color:#D4D4D4;"> for </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#6A9955;">//or</span></span>
<span class="line"><span style="color:#569CD6;">settings</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"></span></code></pre></div><p>These are a means of defining <a href="../dialogs/dialog_properties">dialog properties</a> ahead of time so the dialogs themselves can be very lean.</p><p>Inside the block body are <a href="../mgs/dialog_settings_target_block">dialog settings target blocks</a> in any order. For example:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">settings</span><span style="color:#D4D4D4;"> for </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">default</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">Bob</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">label</span><span style="color:#D4D4D4;"> </span><span style="color:#4EC9B0;">PLAYER</span><span style="color:#D4D4D4;"> {}</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="behavior" tabindex="-1"><a class="header-anchor" href="#behavior" aria-hidden="true">#</a> Behavior</h4><p>Dialog settings are applied to <a href="../dialogs">dialogs</a> in order as the parser encounters them; a dialog settings block partway down the file will affect only the dialogs afterward, and none before.</p><ul><li>New settings will override old settings. <ul><li>E.g. if you assign the player the alignment <code>TOP_RIGHT</code> and then <code>BOTTOM_RIGHT</code> back-to-back, dialogs will use <code>BOTTOM_RIGHT</code>.</li></ul></li><li>Entity settings will override global settings. <ul><li>E.g. if you assign alignment <code>BOTTOM_LEFT</code> to the global defaults, and <code>BOTTOM_RIGHT</code> to the player entity, dialogs involving the player entity will use <code>BOTTOM_RIGHT</code>.</li></ul></li><li>Dialog label settings will override entity settings.</li><li>Properties given in a dialog&#39;s body will override any other settings, however.</li></ul>`,9),t=[o];function i(r,p){return a(),e("div",null,t)}const d=s(n,[["render",i],["__file","dialog_settings_block.html.vue"]]);export{d as default};
