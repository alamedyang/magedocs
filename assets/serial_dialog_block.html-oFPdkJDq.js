import{_ as a,o as s,c as e,a as l}from"./app-7-tBH-Mq.js";const n={},o=l(`<h1 id="serial-dialog-block" tabindex="-1"><a class="header-anchor" href="#serial-dialog-block" aria-hidden="true">#</a> Serial Dialog Block</h1><p>To define an <a href="../mgs/mgs_natlang">MGS Natlang</a> <a href="../dialogs/serial_dialogs">serial dialog</a>, start a new <a href="../mgs/block">block</a> at the root level:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">serial dialog $string {}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>Similar to <a href="../mgs/dialog_block">dialog blocks</a>, serial dialog blocks allow you to name and populate a serial dialog. Serial dialogs are shown in the serial console instead of the badge&#39;s physical screen.</p><p>These blocks aren&#39;t being defined inside a <a href="../mgs/script_block">script body</a>, so a serial dialog name is required. (The name is whatever is given for <a href="../mgs/variables/string">string</a>.)</p><p>Inside the curly braces may be any number of <a href="../mgs/serial_dialogs_mgs">serial dialogs</a>. For example:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">serial dialog</span><span style="color:#9CDCFE;"> bootupTalk</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Bootup sequence completed!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The pair to the above usage is the action <a href="../actions/SHOW_SERIAL_DIALOG">SHOW_SERIAL_DIALOG</a>:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bootupTalk</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Defining the serial dialog externally and &quot;calling&quot; it within a script by name is comparable to what has to be done with game files in raw JSON.</p><h2 id="combination-block" tabindex="-1"><a class="header-anchor" href="#combination-block" aria-hidden="true">#</a> Combination Block</h2><p>You can <a href="../mgs/combination_block">combine</a> these two usages into one with a <a href="../mgs/show_serial_dialog_block">show serial dialog block</a>:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#CE9178;">&quot;Bootup sequence completed!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div>`,13),i=[o];function p(c,t){return s(),e("div",null,i)}const d=a(n,[["render",p],["__file","serial_dialog_block.html.vue"]]);export{d as default};
