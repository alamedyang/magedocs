import{_ as o,r as l,o as t,c as p,b as a,d as s,e as r,w as c,a as e}from"./app-MrF-XoWp.js";const i={},D=e(`<h1 id="mgs-natlang" tabindex="-1"><a class="header-anchor" href="#mgs-natlang" aria-hidden="true">#</a> MGS Natlang</h1><p>Introducing &quot;MageGameScript Natlang&quot; — a simplified approach to writing game content for the DC801 Black Mage Game Engine (MGE).</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// example script</span></span>
<span class="line"><span style="color:#DCDCAA;">on_load-wopr</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">turn</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">player control</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">off</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">walk</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">%PLAYER%</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> along </span><span style="color:#9CDCFE;">geometry</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">walkline</span><span style="color:#D4D4D4;"> over </span><span style="color:#B5CEA8;">600ms</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">wait</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">400ms</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">turn</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">player control</span><span style="color:#D4D4D4;"> </span><span style="color:#569CD6;">on</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">PLAYER</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Whoa! It looks like I found some kind of back door.&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">flag</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">backdoor-found</span><span style="color:#D4D4D4;"> to </span><span style="color:#569CD6;">true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>MGS Natlang is a &quot;natural&quot; language meant to be easy to read and write. It consists of phrases that correlate to the shape of JSON required by the MGE encoder, plus QOL syntax like <code>if</code>/<code>else</code> and <a href="../mgs/show_dialog_block">define-in-place dialogs</a>.</p>`,4),d=a("a",{href:"../scripts/scripts_json"},"JSON script files",-1),y=a("a",{href:"../dialogs/dialogs_json"},"JSON dialog files",-1),u=a("a",{href:"../structure/scenario.json"},[a("code",null,"scenario.json")],-1),h=a("a",{href:"../getting_started/scenario_source_files"},[a("code",null,"scenario_source_files")],-1),g=e(`<p>See: <a href="../mgs/mgs_natlang_vs_json">MGS Natlang vs JSON</a></p><h2 id="syntax-features" tabindex="-1"><a class="header-anchor" href="#syntax-features" aria-hidden="true">#</a> Syntax Features</h2><ol><li>White space agnostic.</li></ol><ul><li>The syntax coloring might break if you are very creative with line breaks, but it should still parse correctly.</li></ul><ol start="2"><li>Many strings can be unquoted or quoted freely.</li></ol><ul><li>Double (<code>&quot;</code>) or single (<code>&#39;</code>) quotes are both fine. (Though a #potentialchange is making double quotes mandatory, and possibly using the single quotes for something else. Best stick with double quotes for now.)</li><li>Anything with a space or any unusual character <em>must</em> be wrapped in quotes.</li></ul><ol start="3"><li>Some words are optional, and can be included either to increase logical clarity or omitted to decrease word density. E.g. the following two patterns are equivalent phrases:</li></ol><ul><li><code>goto script scriptName;</code></li><li><code>goto scriptName;</code></li></ul><ol start="4"><li>Certain <a href="../mgs/variables_mgs">MGS Natlang variables</a> can be formatted in multiple, human-friendly ways, e.g.</li></ol><ul><li>Duration: <code>1000ms</code> or <code>1s</code> or <code>1000</code></li><li>Quantity: <code>once</code> or <code>1x</code> or <code>1</code></li></ul><h2 id="ide-support" tabindex="-1"><a class="header-anchor" href="#ide-support" aria-hidden="true">#</a> IDE Support</h2><p>We have provided syntax colors for a variety of text editors an IDEs, but particularly for Visual Studio Code. See: <a href="../mgs/syntax_colors">Syntax Colors</a></p><h2 id="revisions" tabindex="-1"><a class="header-anchor" href="#revisions" aria-hidden="true">#</a> Revisions</h2><p>The Natlang source code is kept within the DC801 black mage game repo, under <code>SD_Card/MAGE/editor/dependencies/natlang-parser/</code></p><p>Natlang is under active development, and the grammar may be updated — sometimes dramatically — in tandem with the badge game source code. The Natlang parser will inform you when it has encountered a syntax error, but always be prepared to consult the documentation (which is generated procedurally based on the current syntax definitions) when writing something!</p><h3 id="planned-changes" tabindex="-1"><a class="header-anchor" href="#planned-changes" aria-hidden="true">#</a> Planned Changes</h3><ul><li>Requiring <code>;</code> for actions (currently optional)</li><li>Requiring <code>&quot;</code> for quoted strings (currently <code>&#39;</code> is allowed)</li><li>Turning <code>is</code>/<code>is not</code> into <code>==</code> and <code>!=</code>, which will make condition inversions more straightforward. (Hoping for <code>&amp;&amp;</code> to join <code>||</code> at some point....)</li><li>Math-type actions (and <code>SET_</code> actions) to be phrased in a more standard, uniform way: <code>set _ to _;</code> to become <code>_ = _;</code>.</li><li>More normal variable handling: <code>mutate varName = 1;</code> to become <code>varName = 1;</code></li></ul><h3 id="goal-better-parsing" tabindex="-1"><a class="header-anchor" href="#goal-better-parsing" aria-hidden="true">#</a> Goal: Better Parsing</h3><ul><li>Parsing error recovery</li><li>Syntax highlighting for simpler plugins and frameworks (TextMate grammars are quite slow)</li><li>VSCode Language server <ul><li>Jump to definition</li><li>Rename symbol</li><li>Auto complete entity names, script names, geometry names, etc.</li><li>Tooltips?</li></ul></li></ul><h3 id="goal-expressions" tabindex="-1"><a class="header-anchor" href="#goal-expressions" aria-hidden="true">#</a> Goal: Expressions</h3><p>Complex expressions like: <code>varName = ((entity Bob x + 5) * 20) % 3;</code></p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// to make entity Bob follow the player&#39;s movement,</span></span>
<span class="line"><span style="color:#6A9955;">// but 40 pixels to the right:</span></span>
<span class="line"><span style="color:#DCDCAA;">script</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">copy </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">%PLAYER%</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">y</span><span style="color:#D4D4D4;"> into </span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bob-y</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">copy </span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bob-y</span><span style="color:#D4D4D4;"> into </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Bob</span><span style="color:#D4D4D4;"> y;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">copy </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">%PLAYER%</span><span style="color:#CE9178;">&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> into </span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bob-x</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bob-x</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">40</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">copy </span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bob-x</span><span style="color:#D4D4D4;"> into </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">Bob</span><span style="color:#D4D4D4;"> x;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Would become</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">script {</span></span>
<span class="line"><span style="color:#D4D4D4;">  entity Bob y = entity &quot;%PLAYER%&quot; y;</span></span>
<span class="line"><span style="color:#D4D4D4;">  entity Bob x = entity &quot;%PLAYER%&quot; x + 40;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div>`,24);function m(C,b){const n=l("RouterLink");return t(),p("div",null,[D,a("p",null,[s("All MGS files are turned into JSON by the "),r(n,{to:"/encoder.html"},{default:c(()=>[s("encoder")]),_:1}),s(". Unlike "),d,s(" and "),y,s(", you don't need to declare MGS files in the game's "),u,s("; all MGS files inside "),h,s(" will be imported.")]),g])}const E=o(i,[["render",m],["__file","mgs_natlang.html.vue"]]);export{E as default};
