import{_ as s,o as a,c as e,a as n}from"./app-j-XjLWpf.js";const o={},l=n(`<h1 id="advanced-syntax" tabindex="-1"><a class="header-anchor" href="#advanced-syntax" aria-hidden="true">#</a> Advanced Syntax</h1><p>These features are QOL expansions and substitutions that allow <a href="../mgs/mgs_natlang">MGS Natlang</a> to more closely resemble real programming languages.</p><p>None of these features exist in the &quot;real&quot; underlying MGE structure, JSON; if using the JSON to Natlang exporter, none of these features will be present.</p><h2 id="labels" tabindex="-1"><a class="header-anchor" href="#labels" aria-hidden="true">#</a> Labels</h2><p>A <strong>label</strong> is a destination for conditional (or non-conditional) jumps inside the <a href="../scripts">script</a> that is currently running. A label linker converts these into absolute index jumps after <a href="../actions/COPY_SCRIPT">COPY_SCRIPT</a> is expanded but before the JSON becomes <a href="../encoder">encoded</a> into binary data.</p><p>The syntax is a <a href="variables_mgs#bareword">bareword</a> followed by a colon (<code>:</code>).</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;One...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Two...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">goto</span><span style="color:#9CDCFE;"> label</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">four</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Three...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  four:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Four... wait, did I skip one?&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><br><div class="highlight-line"> </div><br><br></div></div><p>The above will print:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">One...</span></span>
<span class="line"><span style="color:#D4D4D4;">Two...</span></span>
<span class="line"><span style="color:#D4D4D4;">Four... wait, did I skip one?</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><h2 id="return" tabindex="-1"><a class="header-anchor" href="#return" aria-hidden="true">#</a> Return</h2><p><code>return</code> is a keyword that will end the current <a href="../scripts">script</a> early. (It simply sets the action index past the end of the script, causing it to immediately end.)</p><p>This will not prevent <a href="../script_slots#on-tick"><code>on_tick</code></a> scripts from looping on the next game tick, however; if you want to stop an <code>on_tick</code> script for good, you must explicitly <a href="../RUN_SCRIPT">goto</a> <code>null_script</code>.</p><h3 id="returning-a-value" tabindex="-1"><a class="header-anchor" href="#returning-a-value" aria-hidden="true">#</a> Returning a Value</h3><p>...Sorry, but you can&#39;t &quot;return&quot; a value to the script&#39;s &quot;caller.&quot; (We don&#39;t have a call stack!)</p><p>If you want to emulate value-returning behavior, you might try assigning a value to a variable as a script&#39;s last action, then have another script <a href="../actions/COPY_SCRIPT">COPY_SCRIPT</a> it and use the variable like normal.</p><h2 id="while-and-for" tabindex="-1"><a class="header-anchor" href="#while-and-for" aria-hidden="true">#</a> While and For</h2><p><code>while</code> and <code>for</code> are looping syntax constructions that expand to &quot;<a href="../actions/GOTO_ACTION_INDEX">goto</a> <a href="#labels">label</a>&quot; actions.</p><p>Special keywords:</p><ul><li><code>continue</code>: This will stop the loop (without finishing the contents of the current loop) and start it again from the top. (<code>for</code> loops will still do their increment step after a <code>continue</code>, even if the rest of the loop is skipped.)</li><li><code>break</code>: This will abandon all looping behavior, and continue the script below the <code>while</code> or <code>for</code> body.</li></ul><p>Note that if multiple loops are nested, <code>break</code> and <code>continue</code> will only apply to their own associated loop, and not arbitrary named <code>while</code> or <code>for</code> loops. (You might try <code>goto label ___</code> instead.)</p><p><code>break</code> and <code>continue</code> must be followed by a semicolon (<code>;</code>).</p><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> While</h4><p><code>while</code> lets you repeat a segment of code while the condition remains true.</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">scriptName</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">count</span><span style="color:#D4D4D4;"> &lt; 5) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;Wow! I&#39;ve had </span><span style="color:#569CD6;">$count$</span><span style="color:#CE9178;"> sodas today!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div></div><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> For</h4><p>For <code>for</code>, the parentheses encloses three sets of words separated by semicolons (<code>;</code>):</p><ol><li>Initial: setting the value of your loop counting variable</li><li>Condition: the condition under which the body of the <code>for</code> is to be executed</li><li>Increment: changing the value of your loop counting variable</li></ol><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">script</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Let&#39;s count to 4!&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">$i$</span><span style="color:#CE9178;">...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">$i$</span><span style="color:#CE9178;">!&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div></div><p>will produce:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">Let&#39;s count to 4!</span></span>
<span class="line"><span style="color:#D4D4D4;">1...</span></span>
<span class="line"><span style="color:#D4D4D4;">2...</span></span>
<span class="line"><span style="color:#D4D4D4;">3...</span></span>
<span class="line"><span style="color:#D4D4D4;">4!</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>Fun fact: <code>for</code> is kind of like <code>while</code>, but with extra steps.</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">for (INIT; COND; ITER) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  BODY</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>The above is equivalent to:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">INIT</span></span>
<span class="line"><span style="color:#D4D4D4;">while (COND) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  BODY</span></span>
<span class="line"><span style="color:#D4D4D4;">  ITER</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><h2 id="if-and-else" tabindex="-1"><a class="header-anchor" href="#if-and-else" aria-hidden="true">#</a> If and Else</h2><p>An easier way of writing and daisy chaining <a href="../conditional_gotos">conditional gotos</a>:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">if ( CONDITION ) { BEHAVIOR/BODY }</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><ul><li>The <code>if</code> <strong>condition</strong> is wrapped with parentheses, and the <code>if</code> <strong>body</strong> is wrapped with curly braces.</li><li>The <code>if</code> body may contain additional <code>if</code>s.</li><li>Normal actions can occur before and after the <code>if</code>.</li><li>Actions that occur after the <code>if</code>/<code>else</code> chain will happen regardless of whether the <code>if</code> condition is met.</li></ul><p><code>if</code> statements can be followed by <code>else if</code> and <code>else</code> in the standard manner, wherein the script logic will take one of many mutually-exclusive paths.</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">if ( CONDITION ) { BEHAVIOR/BODY }</span></span>
<span class="line"><span style="color:#D4D4D4;">else if ( CONDITION ) { BEHAVIOR/BODY }</span></span>
<span class="line"><span style="color:#D4D4D4;">else { BEHAVIOR/BODY }</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">// or, more commonly:</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">if ( CONDITION ) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  BODY</span></span>
<span class="line"><span style="color:#D4D4D4;">} else if ( CONDITION ) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  BODY</span></span>
<span class="line"><span style="color:#D4D4D4;">} else {</span></span>
<span class="line"><span style="color:#D4D4D4;">  BODY</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><ul><li>If an <code>if</code> or <code>else if</code> condition is met, no other conditions in that chain is checked.</li><li><code>else</code> defines behavior that happens if none of the above <code>if</code> or <code>else if</code> conditions are met.</li><li>Any number of <code>else if</code>s is allowed, but only one <code>else</code> is allowed.</li><li>Shared behavior will resume after an <code>else</code> body or after the last <code>else if</code> body.</li></ul><p>Remember: An <code>if</code> and <code>else if</code> is <em>not</em> equivalent to two <code>if</code>s!</p><h3 id="compound-conditions" tabindex="-1"><a class="header-anchor" href="#compound-conditions" aria-hidden="true">#</a> Compound conditions</h3><p>Multiple conditions can be checked at the same time with <code>||</code> (boolean OR), which indicates that <em>any</em> of the given conditions can be true for the branching behavior to occur:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">  if ( condition-A || condition-B ) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    behavior-AB</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>The equivalent boolean AND (<code>&amp;&amp;</code>) is not implemented, however. If you need an AND, you will need to invert the conditions and use OR:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">// NOT ALLOWED:</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">if ( you have money &amp;&amp; the game is for sale ) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  buy the game</span></span>
<span class="line"><span style="color:#D4D4D4;">} else {</span></span>
<span class="line"><span style="color:#D4D4D4;">  don&#39;t buy the game</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">// INSTEAD:</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">if ( you don&#39;t have money || the game is not for sale ) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  don&#39;t buy the game</span></span>
<span class="line"><span style="color:#D4D4D4;">} else {</span></span>
<span class="line"><span style="color:#D4D4D4;">  buy the game</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><h2 id="macros" tabindex="-1"><a class="header-anchor" href="#macros" aria-hidden="true">#</a> Macros</h2><h3 id="include" tabindex="-1"><a class="header-anchor" href="#include" aria-hidden="true">#</a> <code>include!()</code></h3><p>This macro will copy and paste the plaintext contents of the named <a href="../mgs/mgs_natlang">MGS</a> file into place. (The path of the file doesn&#39;t matter; it just has to be in <a href="../mage_folder#scenario_source_files"><code>scenario_source_files</code></a> somewhere.) Line breaks are changed into spaces to make the line numbers consistent with the original file.</p><p>This is recursive, so be careful.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Do not use <a href="mgs_natlang_structure#line-comment">line comments</a> (<code>//</code>) in a file that is to be referenced by <a href="advanced_syntax#include"><code>include!()</code></a>! Such comments will never terminate and whole swaths of code might be lost, which can result in a wide range of baffling encoder errors.</p></div><p>This is best used for common settings, such as the <a href="../mgs/dialog_settings_target_block">player dialog label</a>.</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">include!</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;header.mgs&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> <code>const!()</code></h3><p>This macro emulates compile-time constants. Its main purpose is to help you avoid &quot;magic numbers&quot; in your <a href="../scripts">script</a> by allowing you to define a <a href="../variables_mgs#number">number</a>, <a href="../mgs/variables_mgs#string">string</a>, or <a href="../mgs/variables_mgs#boolean">boolean</a> in a single place, even if you need to use it multiple times.</p><p>The macro literally replaces each constant with the token collected during its original value assignment.</p><p>These constants are <em>not</em> meant to be used as variables for in-game logic, as the game will never see the constant as a variable at all, but will only see the token captured by the macro. To emphasize this point, you cannot change the value of a constant once you&#39;ve defined it. If you find yourself wanting to do this, you probably want to be using a <a href="../variables#integer-variables">variable</a> instead.</p><p>Inside the above parentheses can be any number of constant assignments:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">[CONST_NAME] = [VALUE]</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><ul><li><code>CONST_NAME</code>: <code>$</code> + <a href="../mgs/variables_mgs#bareword">bareword</a> (e.g. <code>$varName</code>)</li><li><code>VALUE</code>: any <a href="../mgs/variables_mgs">variable</a> whatsoever, e.g. any <a href="../mgs/variables_mgs#number">number</a>, <a href="../mgs/variables_mgs#string">string</a>, <a href="../mgs/variables_mgs#bareword">bareword</a>, <a href="../mgs/variables_mgs#duration">duration</a>, etc.</li></ul><p>Keep in mind that <code>$</code> is also used in this documentation&#39;s Natlang &quot;dictionary&quot; syntax (e.g. <code>wait $duration</code>), but that is a different usage, as those variables are to be replaced by values of that variable type (e.g. <code>wait 100ms</code>), whereas these constants will appear in the final MGS file literally in the form <code>$_</code>.</p><p>To assign such a constant once while using it multiple times throughout your project, combine this with <a href="#include"><code>include!()</code></a>.</p><h4 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h4><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">const!</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4FC1FF;">$field</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">x</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4FC1FF;">$bigNumber</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">9001</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4FC1FF;">$hamburgers</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;Steamed Toast&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">testScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">$hamburgers</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">$field</span><span style="color:#D4D4D4;"> to </span><span style="color:#4FC1FF;">$bigNumber</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>After the macro does its work, the script <code>testScript</code> instead will read:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">testScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Steamed Toast&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> to </span><span style="color:#B5CEA8;">9001</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The above is what the MGS Natlang syntax parser will actually parse. Syntax errors (if any) will be caught at that point and not before; the macro literally doesn&#39;t care what the underlying syntax is.</p><h4 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h4><ul><li><code>const!()</code> registers and replaces tokens; it does not find-and-replace arbitrary strings. For this reason, you will not be able to use constants inside a <a href="../variables_mgs#quoted-string">quoted string</a>, since a quoted string <em>in its entirety</em> counts as a single token.</li><li>In addition, this macro only captures single tokens; you cannot use a constant to represent multiple tokens, e.g. <code>const!($parade = 76 trombones);</code> will result in a syntax error.</li></ul><h3 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> <code>debug!()</code></h3><p>For quick logging, you can use <code>debug!()</code> to generate <a href="../terminal">terminal</a> output that will only print when <a href="../debug_tools#debug-mode">debug mode</a> is on. Thus:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">scriptName</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#DCDCAA;">debug!</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;Debug mode GO!&quot;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><br></div></div><p>becomes</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">scriptName</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">debug mode</span><span style="color:#D4D4D4;"> is </span><span style="color:#569CD6;">on</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> {</span><span style="color:#CE9178;">&quot;Debug mode GO!&quot;</span><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div></div><p>The allowed contents of <code>debug!()</code> are the same as the allowed contents of a <a href="../mgs/serial_dialog_block">serial dialog block</a>.</p>`,76),t=[l];function p(i,c){return a(),e("div",null,t)}const d=s(o,[["render",p],["__file","advanced_syntax.html.vue"]]);export{d as default};
