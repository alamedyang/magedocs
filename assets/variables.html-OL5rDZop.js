import{_ as e,o as a,c as t,a as s}from"./app-j-XjLWpf.js";const n={},r=s(`<h1 id="variables" tabindex="-1"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h1><p>There are only a few Mage Game Engine (MGE) variables available for <a href="scripts">scripts</a> to use. All variables are equally accessible to all scripts at all times (globals).</p><p>Variables don&#39;t have to be declared before they can be used; simply using an <a href="actions">action</a> that sets or checks one will cause the encoder to include it in the <code>game.dat</code>.</p><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>This means that typos in variable names can be hard to spot. If you set <code>birthdayparty</code> but check <code>birthday_party</code>, the encoder will create and store both variables as if they were separate things.</p><p>If you find a variable isn&#39;t triggering logic checks in the ways you expect, check your spelling!</p></div><p>All variables are persistent between <a href="map_loads">map loads</a> because all are all included in the <a href="variables#save-data">save data</a>.</p><details class="custom-container details"><summary>For some dubious alternatives...</summary><p>Every <a href="entity_properties">property</a> on every <a href="entities">entity</a> is available for scripts to read and/or change, and might be used like normal variables. However, in practice, these might have limited utility because the player can <a href="hex_editor">change these values directly</a> and these values are reset upon <a href="map_loads">map load</a>.</p></details><h2 id="warp-state" tabindex="-1"><a class="header-anchor" href="#warp-state" aria-hidden="true">#</a> <code>warp_state</code></h2><p>This is a single <strong>string</strong> that is designated for controlling player spawn behavior on a map&#39;s <a href="script_slots#on-load"><code>on_load</code></a> script. When you <a href="techniques/doors">leave a room</a> (or otherwise trigger a new <a href="maps">map</a> to load), the <code>warp_state</code> string should be set to something that indicates the exit/entrance point so the next map can teleport the player entity to the appropriate <a href="techniques/spawn_points">spawn point</a>.</p><p>Handling player spawn points is the original purpose for <code>warp_state</code>, but there&#39;s nothing stopping you from using it for other things, too.</p><h2 id="integer-variables" tabindex="-1"><a class="header-anchor" href="#integer-variables" aria-hidden="true">#</a> Integer Variables</h2><p><strong>Integer</strong> variables are <code>uint16_t</code>, meaning they can be any whole number between <code>0</code> and <code>65535</code>. (No negative numbers, no <code>NaN</code>.) You may have up to 255 of these.</p><p>The default value is <code>0</code>.</p><h2 id="save-flags" tabindex="-1"><a class="header-anchor" href="#save-flags" aria-hidden="true">#</a> Save Flags</h2><p>Save flags are <strong>booleans</strong> with arbitrary names (strings) that can be used for various logic checks. You may have up to 65535 of these.</p><p>Common use cases for save flags include tracking whether the player has:</p><ul><li>heard specific entities&#39; backstories</li><li>seen specific <a href="techniques/cutscenes">cutscenes</a></li><li>completed specific puzzles</li><li>found specific secrets</li></ul><p>You will likely need to employ <a href="techniques/chains_of_small_checks">chains of small checks</a> at the beginning of your <a href="maps">map</a>&#39;s <a href="script_slots#on-load"><code>on_load</code></a> <a href="scripts">script</a> to initialize the map based on the states of save flags like those above.</p><h2 id="printing-current-values" tabindex="-1"><a class="header-anchor" href="#printing-current-values" aria-hidden="true">#</a> Printing Current Values</h2><p>The values of <a href="variables#integer-variables">integer variables</a> and the <strong>current names</strong> of any <a href="entities">entity</a> can be inserted into a dialog message, dialog label, or similar places.</p><h3 id="current-variable-value" tabindex="-1"><a class="header-anchor" href="#current-variable-value" aria-hidden="true">#</a> Current Variable Value</h3><p>Enclose the name of the variable in dollar signs, like this: <code>$appleCount$</code></p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">appleCount</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;I have </span><span style="color:#569CD6;">$appleCount$</span><span style="color:#CE9178;"> apples for sale today!&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The above script will produce:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">I have 10 apples for sale today!</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">&gt;_</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p><a href="mgs/mgs_natlang">MGS Natlang</a> will wrap text automatically, but if wrapping by hand, it&#39;s recommended to count these as taking up 5 characters.</p><h3 id="current-entity-name" tabindex="-1"><a class="header-anchor" href="#current-entity-name" aria-hidden="true">#</a> Current Entity Name</h3><p>Wrap an entity&#39;s <strong>given name</strong> (the name assigned to it in Tiled) in percent signs (<code>%</code>) to insert the entity&#39;s name as it currently exists in RAM: <code>&quot;Hi, there! My name is %Bob%!&quot;</code></p><p>Unlike with <a href="entities/relative_references">relative entity references</a> (like <a href="relative_references#self"><code>%SELF%</code></a> and <a href="relative_references#player"><code>%PLAYER%</code></a>), this usage will not work when trying to target an entity with an action.</p><p><a href="mgs/mgs_natlang">MGS Natlang</a> will wrap text automatically, but if wrapping by hand, it&#39;s recommended to count these as taking up 12 characters.</p><h2 id="other-state" tabindex="-1"><a class="header-anchor" href="#other-state" aria-hidden="true">#</a> Other State</h2><p>These states are not preserved in game saves, but do persist through map loads (#verifyme). Control these with the actions listed:</p><ul><li><strong>player control</strong>: whether the player can move, interact with entities, use the hex editor, or perform other actions (<a href="actions/SET_PLAYER_CONTROL">SET_PLAYER_CONTROL</a>)</li><li><strong>hex editor control</strong>: whether the player can open the hex editor (<a href="actions/SET_HEX_EDITOR_CONTROL">SET_HEX_EDITOR_CONTROL</a>)</li><li><strong>hex editor clipboard control</strong>: whether the player can use the hex editor clipboard (<a href="actions/SET_HEX_EDITOR_CONTROL_CLIPBOARD">SET_HEX_EDITOR_CONTROL_CLIPBOARD</a>)</li><li><strong>auto lights control</strong>: whether the LEDs around the screen are controlled automatically or manually (<a href="actions/SET_LIGHTS_CONTROL">SET_LIGHTS_CONTROL</a>)</li><li><strong>serial dialog control</strong>: whether the player can enter anything into the serial console (<a href="actions/SET_SERIAL_DIALOG_CONTROL">SET_SERIAL_DIALOG_CONTROL</a>)</li></ul><p>A few other statesÂ can be checked and manipulated, but due to their nature, these are not included in game save data, nor do they persist between map loads:</p><ul><li>whether a dialog is open</li><li>whether a serial dialog is open</li><li>whether debug mode is on</li></ul><h2 id="save-data" tabindex="-1"><a class="header-anchor" href="#save-data" aria-hidden="true">#</a> Save Data</h2><p>The state that is preserved when a game is saved includes:</p><ul><li>The <a href="variables#warp-state">warp_state</a> value</li><li>All <a href="variables#save-flags">save flag</a> values (booleans)</li><li>All <a href="variables#integer-variables">integer variable</a> values (uint16)</li><li>The player&#39;s name (string)</li><li><code>MEM</code> button offsets (the player can change the <code>MEM</code> button mapping)</li><li>hex editor clipboard contents (up to 32 bytes)</li><li>current map id (NOTE: this is saved, but not currently used upon load; player position is captured and restored manually in the Black Mage Game)</li></ul>`,37),i=[r];function o(l,c){return a(),t("div",null,i)}const p=e(n,[["render",o],["__file","variables.html.vue"]]);export{p as default};
