import{_ as s,o as a,c as n,a as l}from"./app-oGoBbKgC.js";const o={},e=l(`<h1 id="labels" tabindex="-1"><a class="header-anchor" href="#labels" aria-hidden="true">#</a> Labels</h1><p>Advanced <a href="../../mgs/mgs_natlang">MGS Natlang</a> syntax (specifically for <a href="../../mgs/scripts_mgs">MGS Natlang scripts</a>).</p><p>A label is a destination for conditional (or non-conditional) jumps inside the <a href="../../scripts">script</a> that is currently running. A label linker converts these into absolute index jumps after <a href="../../actions/COPY_SCRIPT">COPY_SCRIPT</a> is expanded but before the JSON becomes <a href="../../encoder/mge_encoder">encoded</a> into binary data.</p><p>The syntax is a <a href="../../mgs/variables/bareword">Bareword</a> followed by a colon (<code>:</code>).</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;One...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Two...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">goto</span><span style="color:#9CDCFE;"> label</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">four</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Three...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C8C8C8;">four</span><span style="color:#D4D4D4;">:</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Four... wait, did I skip one?&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The above will print:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">One...</span></span>
<span class="line"><span style="color:#D4D4D4;">Two...</span></span>
<span class="line"><span style="color:#D4D4D4;">Four... wait, did I skip one?</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div>`,7),p=[e];function t(r,c){return a(),n("div",null,p)}const i=s(o,[["render",t],["__file","labels.html.vue"]]);export{i as default};
