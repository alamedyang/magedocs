import{_ as e,o as t,c as a,a as o}from"./app-8J5AkPq7.js";const s={},n=o('<h1 id="actors" tabindex="-1"><a class="header-anchor" href="#actors" aria-hidden="true">#</a> Actors</h1><p>You might want an <a href="../entities">entity</a> to appear as another for a time. Let&#39;s call the repurposed entity the <strong>actor</strong> and the part they are playing their <strong>costume</strong>.</p><p>You might do this so that an entity can have a surprise cameo, or to reduce your entity count on the <a href="../maps">map</a> in general.</p><details class="custom-container details"><summary>Examples</summary><p>For the BMG2020, we used actors several times on the main map because we had already hit the entity budget (32 at the time; 64 now).</p><p><strong>Walking to the lodge cutscene</strong>: Helga played the part of Uncle Zappy, and Ram played the part of Aunt Zippy.</p><p><strong>Earthquake cutscene</strong>: Helga played the part of Trekkie, and Ram played the part of Beatrice.</p></details><p>This works best if done between <a href="../maps">map</a> loads or camera teleports — but it should definitely only be done when you can guarantee the player won&#39;t see the actor&#39;s &quot;costume change&quot; or notice the original entity has gone missing.</p><p>A <a href="../map_loads">map load</a> will restore the actor to its original state, and is a fast way of cleaning up a cutscene with a lot of actors. Otherwise, you&#39;ll have to set up another costume change to restore the actor to its original state.</p><p>On the other hand, if you want an entity&#39;s costume change to be permanent (e.g. a wanderer leaves town in an early cutscene, but new vendor moves into a shop later in the game), you&#39;ll need a <a href="../variables#save-flags">save flag</a> and the map&#39;s <a href="../script_slots#on-load"><code>on_load</code></a> to <a href="../techniques/chains_of_small_checks">manage this</a>. Best might be to make the actor&#39;s default state the one that is needed for the most map loads.</p><h2 id="using-an-actor" tabindex="-1"><a class="header-anchor" href="#using-an-actor" aria-hidden="true">#</a> Using an Actor</h2><p>To do a costume change, set the actor&#39;s properties to the target costume:</p><ol><li><a href="../entity_types#character-entity">entity_type</a> name — new appearance (costume)</li><li>X and Y coordinates — best done via teleporting to a vector object</li><li><a href="../script_slots#on-interact"><code>on_interact</code></a> script slot — optional; unnecessary for cutscene-only cameos</li><li><a href="../script_slots#on-tick"><code>on_tick</code></a> script slot — optional; unnecessary for cutscene-only cameos</li><li><a href="../script_slots#on-look"><code>on_look</code></a> script slot — optional; unnecessary for cutscene-only cameos</li><li><code>name</code> — will allow the actor to be labeled correctly in the hex editor and in dialog message labels</li></ol><p>When doing choreography involving the actor, use the actor&#39;s original name (not the costume&#39;s name) in your actions&#39; arguments. This includes dialog messages using the <code>entity</code> property. It helps to leave comments to remind yourself that an actor is acting. (See: <a href="../comments">Comments</a>, <a href="../mgs/mgs_natlang_structure#comments">MGS Natlang Structure#Comments</a>)</p><p>To reset the actor, either:</p><ol><li>Load a map. (The next load will use the actor&#39;s default state.)</li><li>Set the actor&#39;s properties to what they originally were: <ol><li><a href="../entity_types#character-entity">entity_type</a> name</li><li>X and Y coordinates (e.g. teleporting to a vector object)</li><li><a href="../script_slots#on-interact"><code>on_interact</code></a> script slot (if changed)</li><li><a href="../script_slots#on-tick"><code>on_tick</code></a> script slot (if changed)</li><li><a href="../script_slots#on-look"><code>on_look</code></a> script slot (if changed)</li><li><code>name</code></li></ol></li></ol>',13),r=[n];function i(c,l){return t(),a("div",null,r)}const d=e(s,[["render",i],["__file","Actors.html.vue"]]);export{d as default};
