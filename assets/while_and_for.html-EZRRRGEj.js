import{_ as s,o as a,c as n,a as l}from"./app-7-tBH-Mq.js";const o={},e=l(`<h1 id="while-and-for" tabindex="-1"><a class="header-anchor" href="#while-and-for" aria-hidden="true">#</a> While and For</h1><p><a href="../../mgs/advanced_mgs_natlang_syntax">Advanced MGS Natlang Syntax</a> for <a href="../../scripts/scripts_json">MGS Natlang scripts</a>.</p><p><code>while</code> and <code>for</code> are looping syntax constructions that expand to &quot;<a href="../../GOTO_ACTION_INDEX">goto</a> <a href="../../mgs/advanced_syntax/labels">label</a>&quot; actions.</p><p>Special keywords:</p><ul><li><code>continue</code>: This will stop the loop (without finishing the contents of the current loop) and start it again from the top. (<code>for</code> loops will still do their increment step after a <code>continue</code>, even if the rest of the loop is skipped.)</li><li><code>break</code>: This will abandon all looping behavior, and continue the script below the <code>while</code> or <code>for</code> body.</li></ul><p>Note that if multiple loops are nested, <code>break</code> and <code>continue</code> will only apply to their own associated loop, and not arbitrary named <code>while</code> or <code>for</code> loops. (You might try <code>goto label ___</code> instead.)</p><p><code>break</code> and <code>continue</code> must be followed by a semicolon (<code>;</code>).</p><h4 id="while" tabindex="-1"><a class="header-anchor" href="#while" aria-hidden="true">#</a> While</h4><p><code>while</code> lets you repeat a segment of code while the condition remains true.</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">scriptName</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">count</span><span style="color:#D4D4D4;"> &lt; 5) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;Wow! I&#39;ve had </span><span style="color:#569CD6;">$count$</span><span style="color:#CE9178;"> sodas today!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">count</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br></div></div><h4 id="for" tabindex="-1"><a class="header-anchor" href="#for" aria-hidden="true">#</a> For</h4><p>For <code>for</code>, the parentheses encloses three sets of words separated by semicolons (<code>;</code>):</p><ol><li>Initial: setting the value of your loop counting variable</li><li>Condition: the condition under which the body of the <code>for</code> is to be executed</li><li>Increment: changing the value of your loop counting variable</li></ol><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">script</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;Let&#39;s count to 4!&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">; </span><span style="color:#9CDCFE;">variable</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">; </span><span style="color:#569CD6;">mutate</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">i</span><span style="color:#D4D4D4;"> + </span><span style="color:#CE9178;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">$i$</span><span style="color:#CE9178;">...&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">serial dialog</span><span style="color:#D4D4D4;"> { </span><span style="color:#CE9178;">&quot;</span><span style="color:#569CD6;">$i$</span><span style="color:#CE9178;">!&quot;</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br></div></div><p>will produce:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">Let&#39;s count to 4!</span></span>
<span class="line"><span style="color:#D4D4D4;">1...</span></span>
<span class="line"><span style="color:#D4D4D4;">2...</span></span>
<span class="line"><span style="color:#D4D4D4;">3...</span></span>
<span class="line"><span style="color:#D4D4D4;">4!</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>Fun fact: <code>for</code> is kind of like <code>while</code>, but with extra steps.</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">for (INIT; COND; ITER) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  BODY</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>The above is equivalent to:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">INIT</span></span>
<span class="line"><span style="color:#D4D4D4;">while (COND) {</span></span>
<span class="line"><span style="color:#D4D4D4;">  BODY</span></span>
<span class="line"><span style="color:#D4D4D4;">  ITER</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div>`,20),p=[e];function t(c,i){return a(),n("div",null,p)}const D=s(o,[["render",t],["__file","while_and_for.html.vue"]]);export{D as default};
