import{_ as e,o as a,c as t,a as i}from"./app-7-tBH-Mq.js";const o={},r=i('<h1 id="dialogs" tabindex="-1"><a class="header-anchor" href="#dialogs" aria-hidden="true">#</a> Dialogs</h1><p>Dialogs are a visual novel or RPG style dialog system for the screen. These include portrait images, dialog box labels, and dialog messages.</p><p>Arbitrary <a href="actions">actions</a> cannot be performed by the <a href="scripts">script</a> running a dialog. Therefore, if an <a href="entities">entity</a> must change their behavior partway through a dialog message, you must split the dialog into multiple pieces or use another <a href="scripts/script_slots">script slot</a> to control the entity&#39;s behavior.</p><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h2><h3 id="dialog-name" tabindex="-1"><a class="header-anchor" href="#dialog-name" aria-hidden="true">#</a> Dialog Name</h3><p>All dialogs have a name, which is how <a href="scripts">scripts</a> can target them with <a href="actions">actions</a>. This name must be <strong>completely unique</strong> throughout the entire game project files, both between JSON and MGS files.</p><p>In <a href="mgs/mgs_natlang">MGS Natlang</a>, dialogs can be defined and &quot;called&quot; in place, so name definitions can be omitted; however, as Natlang <em>becomes</em> JSON before it&#39;s handed off to the <a href="encoder/mge_encoder">MGE encoder</a>, these dialogs still need a name — and Natlang calculates one based on the file name and line number. This makes debugging dialogs a little more difficult, but dramatically easier to write. (You can still assign them names, or refer to dialogs without defining them, too, if you want to.)</p><h2 id="format" tabindex="-1"><a class="header-anchor" href="#format" aria-hidden="true">#</a> Format</h2><p>Dialogs can have several <a href="dialogs/dialog_properties">properties</a>, but not all of them are required. Dialogs have different written structures between <a href="dialogs/dialogs_json">JSON</a> and <a href="mgs/dialogs_mgs">Natlang</a>, however — the latter being much more compact.</p>',9),s=[r];function n(l,h){return a(),t("div",null,s)}const c=e(o,[["render",n],["__file","dialogs.html.vue"]]);export{c as default};
