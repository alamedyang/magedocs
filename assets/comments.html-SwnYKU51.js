import{_ as o,r as e,o as t,c as l,b as a,d as s,e as p,w as c,a as r}from"./app-MrF-XoWp.js";const i={},D=a("h1",{id:"comments",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#comments","aria-hidden":"true"},"#"),s(" Comments")],-1),d=a("h2",{id:"json",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#json","aria-hidden":"true"},"#"),s(" JSON")],-1),u=a("a",{href:"../actions"},"action",-1),y=r(`<p>Below is an example, where <code>&quot;summary&quot;</code> and <code>&quot;to do&quot;</code> are being used for the script writer&#39;s notes:</p><div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">&quot;show_dialog-example&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;name&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;SHOW_DIALOG&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;dialog&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;dialog-example-start&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;summary&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Oh, hi player! This is an example dialog summary!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;name&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;SET_ENTITY_INTERACT_SCRIPT&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;entity&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;%SELF%&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;script&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;show_dialog-example-end&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;to do&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;redo with save flags so the branching persists&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><p>Putting a small segment of dialog (enough to identify it) with each <a href="../actions/SHOW_DIALOG">SHOW_DIALOG</a> segment makes it <em>dramatically</em> easier to manage them.</p><h2 id="mgs-natlang" tabindex="-1"><a class="header-anchor" href="#mgs-natlang" aria-hidden="true">#</a> MGS Natlang</h2><p>See: <a href="../mgs/mgs_natlang_structure#comments">MGS Natlang Comments</a></p>`,5);function m(h,q){const n=e("RouterLink");return t(),l("div",null,[D,d,a("p",null,[s("If a JSON property isn't used by an "),u,s(", it will be entirely ignored by the "),p(n,{to:"/encoder.html"},{default:c(()=>[s("encoder")]),_:1}),s(". This is the only way documentation or notes can be written in JSON script files, since JSON doesn't support comments.")]),y])}const C=o(i,[["render",m],["__file","comments.html.vue"]]);export{C as default};
