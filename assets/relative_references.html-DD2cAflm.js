import{_ as e,o as s,c as n,a as o}from"./app-JBhK03sk.js";const a={},t=o(`<h1 id="relative-references" tabindex="-1"><a class="header-anchor" href="#relative-references" aria-hidden="true">#</a> Relative References</h1><p>#expandme</p><h2 id="entities" tabindex="-1"><a class="header-anchor" href="#entities" aria-hidden="true">#</a> Entities</h2><ul><li><code>%SELF%</code> — the entity running the script</li><li><code>%PLAYER%</code> — the player entity</li></ul><p>Unlike relative entity names, you can use these two <strong>relative entity references</strong> everywhere, including the arguments of actions.</p><h3 id="player" tabindex="-1"><a class="header-anchor" href="#player" aria-hidden="true">#</a> <code>%PLAYER%</code></h3><p>When used as the target of an <a href="actions">action</a>, <code>%PLAYER%</code> refers to the player entity (the entity marked <code>is_player</code> on the <a href="maps">map</a> in Tiled).</p><p>When used in the body of a message (e.g. <code>&quot;Hello, %PLAYER%!&quot;</code>) it will use the <a href="variables#printing-current-values">current name</a>) of the player entity.</p><h3 id="self" tabindex="-1"><a class="header-anchor" href="#self" aria-hidden="true">#</a> <code>%SELF%</code></h3><p>When used as the target of an <a href="actions">action</a>, <code>%SELF%</code> refers to the <a href="entities">entity</a> running the script.</p><p>When used in the body of a message (e.g. <code>&quot;Hey, there! My name is %SELF%!&quot;</code>) it will use the <a href="variables#printing-current-values">current name</a>) of the entity running the script.</p><h3 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h3><p>#updateme</p><p>Let&#39;s say we have two entities:</p><ol><li>Bender</li><li>Strong Bad</li></ol><p>Plus the <code>%PLAYER%</code> entity:</p><ol start="3"><li>Bob</li></ol><p>And the script:</p><div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">&quot;dialog-introduction&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;alignment&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;BOTTOM_LEFT&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;entity&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;%SELF%&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;messages&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;So you&#39;re %PLAYER%, huh?</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">Well, My name is %SELF%!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;Got it memorized?&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><p>If the entity Bender ran the script above, you would see the following dialog boxes:</p><blockquote><p><strong>Bender</strong>:<br> So you&#39;re Bob, huh?<br> Well, my name is Bender!<br></p></blockquote><blockquote><p><strong>Bender</strong>:<br> Got it memorized?</p></blockquote><p>Because Bender was the entity running the script, the MGE interpreted <code>%SELF%</code> to be <code>Bender</code>.</p><p>If the same script were run by Strong Bad instead, the <code>%SELF%</code> reference would be <code>Strong Bad</code> instead:</p><blockquote><p><strong>Strong Bad</strong>:<br> So you&#39;re Bob, huh?<br> Well, my name is Strong Bad!<br></p></blockquote><blockquote><p><strong>Strong Bad</strong>:<br> Got it memorized?</p></blockquote><div class="custom-container tip"><p class="custom-container-title">Best Practice: Consistency</p><p>All <a href="variables#printing-current-values">entity references</a>) should be consistent within a dialog, whether they are relative or absolute references. If there are multiple dialogs inside the same script, they should be consistent with each other, as well.</p><p>If we change <code>entity</code> to <code>Bender</code> instead of <code>%SELF%</code>, but leave the <code>%SELF%</code> reference in the dialog <code>messages</code> alone, the conversation would appear correct if run by Bender, but no one else.</p></div><div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">&quot;dialog-introduction&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;alignment&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;BOTTOM_LEFT&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;entity&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Bender&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;messages&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;So you&#39;re %PLAYER%, huh?</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">Well, My name is %SELF%!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;Got it memorized?&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><p>If Strong Bad runs the above dialog:</p><blockquote><p><strong>Bender</strong>:<br> So you&#39;re Bob, huh?<br> Well, my name is Strong Bad!<br></p></blockquote><blockquote><p><strong>Bender</strong>:<br> Got it memorized?<br></p></blockquote><p><strong>NOTE:</strong> the <code>entity</code> property is already a relative reference, whereas <code>name</code> is not. So if Bender&#39;s in-game name were changed by the player or a script — let&#39;s change it to Flexo for the sake of this example — then the dialog would still appear consistent (as long as Bender was the one running the script):</p><blockquote><p><strong>Flexo</strong>:<br> So you&#39;re Bob, huh?<br> Well, my name is Flexo!<br></p></blockquote><blockquote><p><strong>Flexo</strong>:<br> Got it memorized?<br></p></blockquote><p>However, if you were using <code>name</code> instead of <code>entity</code>, then you would begin to have issues even when the correct entity is running the script:</p><div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">&quot;dialog-introduction&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;alignment&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;BOTTOM_LEFT&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;name&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Bender&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;messages&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;So you&#39;re %PLAYER%, huh?</span><span style="color:#D7BA7D;">\\n</span><span style="color:#CE9178;">Well, My name is %Bender%!&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">      </span><span style="color:#CE9178;">&quot;Got it memorized?&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">    ]</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><blockquote><p><strong>Bender</strong>:<br> So you&#39;re Bob, huh?<br> Well, my name is Flexo!</p></blockquote><blockquote><p><strong>Bender</strong>:<br> Got it memorized?</p></blockquote><p>In such a case, you would want to use <code>%Bender%</code> for <code>name</code> so that your dialog message and dialog label would be consistent.</p>`,39),l=[t];function r(p,c){return s(),n("div",null,l)}const d=e(a,[["render",r],["__file","relative_references.html.vue"]]);export{d as default};
