import{_ as e,o,c as a,a as c}from"./app-7-tBH-Mq.js";const r={},t=c('<h1 id="operator" tabindex="-1"><a class="header-anchor" href="#operator" aria-hidden="true">#</a> Operator</h1><p>One of the <a href="../../mgs/variables_mgs">MGS Natlang variable</a> types.</p><p>An exhaustive list:</p><ul><li>equal sign: <code>=</code></li><li>plus: <code>+</code></li><li>hyphen: <code>-</code><ul><li>If a <code>-</code> is directly before a <a href="../../mgs/variables/number">number</a>, the number will become negative. Be sure to put a space between a <code>-</code> and a number if you want the <code>-</code> to be interpreted as an operator.</li></ul></li><li>asterisk: <code>*</code></li><li>forward slash: <code>/</code></li><li>percent sign: <code>%</code></li><li>question mark: <code>?</code></li><li>curly braces: <code>{</code> and <code>}</code> (for block boundaries)</li><li>parentheses: <code>(</code> and <code>)</code> (for macros)</li></ul><p><a href="../../Actions">Actions</a> that call for an operator will also accept the corresponding bare words <code>SET</code>, <code>ADD</code> etc.</p>',5),d=[t];function i(l,s){return o(),a("div",null,d)}const p=e(r,[["render",i],["__file","operator.html.vue"]]);export{p as default};
