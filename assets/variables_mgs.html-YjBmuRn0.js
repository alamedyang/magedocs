import{_ as a,o as e,c as s,a as t}from"./app-7-tBH-Mq.js";const n={},o=t(`<h1 id="variables-mgs" tabindex="-1"><a class="header-anchor" href="#variables-mgs" aria-hidden="true">#</a> Variables (MGS)</h1><p>In this documentation&#39;s example syntax for <a href="../mgs/mgs_natlang">MGS Natlang</a>, variables are marked with <code>$</code>. Whatever is put in place of the variable in the example syntax is the variable&#39;s <strong>value</strong>.</p><p>For the example syntax <code>entity $string</code>:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">entity Alice       // var value = &quot;Alice&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">entity Bob         // var value = &quot;Bob&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">entity Charlie     // var value = &quot;Charlie&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">entity &quot;Tom Honks&quot; // var value = &quot;Tom Honks&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>A variable&#39;s <strong>value</strong> is what populates the meat of the JSON output, but its <strong>type</strong> affects how each word is validated against patterns in the MGS Natlang syntax tree, and in most cases will also affect how the word may be formatted in the natlang.</p><p>This documentation uses two formats to indicate a variable, each with a <code>$</code> at the front:</p><ul><li><code>$TYPE</code><ul><li>e.g. <code>$string</code> (which means any valid <a href="../mgs/variables/string">string</a>)</li></ul></li><li><code>$LABEL:TYPE</code><ul><li>e.g. <code>$scriptName:string</code> (which means any valid <a href="../mgs/variables/string">string</a>, and also it will be used as a script name)</li></ul></li></ul><p>The variable&#39;s label for most purposes doesn&#39;t matter much except as a hint as to the variable&#39;s purpose, especially if there are multiple variables in the natlang phrase. (It does matter when trying to analyze the JSON output, however.)</p><h2 id="variable-decay" tabindex="-1"><a class="header-anchor" href="#variable-decay" aria-hidden="true">#</a> Variable Decay</h2><p>A special property of variable types is &quot;decay&quot; â€” this means a variable of a specific type may satisfy a variable&#39;s requirement for a different type.</p><p>Example #1: an action that wants a duration (syntax <code>wait $duration</code>)</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">testScript1</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">wait</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">150ms</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// &quot;duration&quot; = ok</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">wait</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">150</span><span style="color:#D4D4D4;">;   </span><span style="color:#6A9955;">// &quot;number&quot; is fine, too</span></span>
<span class="line"><span style="color:#D4D4D4;">              </span><span style="color:#6A9955;">//   (decays to &quot;duration&quot;)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Example #2: an action that wants a number (syntax: <code>load slot $number</code>)</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">testScript2</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">load</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">slot</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;    </span><span style="color:#6A9955;">// &quot;number&quot; = ok</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">load</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">slot</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">1ms</span><span style="color:#D4D4D4;">;  </span><span style="color:#6A9955;">// &quot;duration&quot; won&#39;t work!</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>In most cases, human intuition is enough to predict whether a variable can decay into another type. (And most things can decay into a <a href="../mgs/variables/bareword">bareword</a>, e.g. <code>true</code> and <code>1000ms</code>.)</p><p>Most important to keep in mind is that a variable wanting to be a <a href="../mgs/variables/string">string</a> will be satisfied by either a <a href="../mgs/variables/bareword">bareword</a> string or a <a href="../mgs/variables/quoted_string">quoted string</a>, but barewords and quoted strings cannot be substituted for each other.</p><h2 id="types-and-examples" tabindex="-1"><a class="header-anchor" href="#types-and-examples" aria-hidden="true">#</a> Types and Examples</h2><p>Note that all numbers must be whole numbers and, unless indicated otherwise, must be positive.</p><ul><li><a href="../mgs/variables/duration">Duration</a>: <code>1000ms</code></li><li><a href="../mgs/variables/distance">Distance</a>: <code>32px</code></li><li><a href="../mgs/variables/quantity">Quantity</a>: <code>10x</code></li><li><a href="../mgs/variables/number">Number</a>: <code>9001</code></li><li><a href="../mgs/variables/color">Color</a>: <code>#FFDDBB</code></li><li><a href="../mgs/variables/boolean">Boolean</a>: <code>true</code></li><li><a href="../mgs/variables/operator">Operator</a>: <code>+</code></li><li><a href="../mgs/variables/bareword">Bareword</a>: <code>Bob</code></li><li><a href="../mgs/variables/quoted_string">Quoted String</a>: <code>&quot;Bob Austin&quot;</code></li><li><a href="../mgs/variables/string">String</a>: <code>BobAustin</code></li></ul><h2 id="enums" tabindex="-1"><a class="header-anchor" href="#enums" aria-hidden="true">#</a> Enums</h2><p>Some action variables will be of a generic <a href="../mgs/mgs_natlang">MGS Natlang</a> type (such as <a href="../mgs/variables/string">string</a>) but the action itself will only be satisfied by a value from a limited set of words. In such cases, invalid values are reported by the MGE encoder.</p><p>See: <a href="../structure/enums">Enums</a></p>`,22),l=[o];function r(i,p){return e(),s("div",null,l)}const d=a(n,[["render",r],["__file","variables_mgs.html.vue"]]);export{d as default};
