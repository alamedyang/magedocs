import{_ as s,r as n,o as i,c as r,b as a,d as e,e as l,a as o}from"./app-60F4FVZl.js";const d={},c=o(`<h1 id="encoder" tabindex="-1"><a class="header-anchor" href="#encoder" aria-hidden="true">#</a> Encoder</h1><p>There are two versions of the encoder, but both produce exactly the same <code>game.dat</code> file. They are both deterministic.</p><p>What gets encoded:</p><ol><li>Everything listed in <a href="mage_folder#scenario-json"><code>scenario.json</code></a>: <ul><li><a href="scripts">scripts</a></li><li><a href="dialogs">dialogs</a></li><li><a href="serial_dialogs">serial dialogs</a></li><li>dialogSkins</li></ul></li><li>Portraits found in <a href="mage_folder#portraits-json"><code>portraits.json</code></a></li><li>Entities found in <a href="mage_folder#entity_types-json"><code>entity_types.json</code></a></li><li>Maps found in <a href="mage_folder#maps-json"><code>maps.json</code></a></li><li>All <a href="mgs/mgs_natlang">MGS files</a> within <a href="mage_folder#scenario_source_files"><code>scenario_source_files</code></a></li></ol><p>These items are encoded if they&#39;re being used by the game in some way; a script that isn&#39;t used by any maps, entities, or referenced any included script will be ignored. In other words, entities must be placed on at least one map to be encoded.</p><p>Superfluous JSON properties are completely ignored by the encoder. This is the only way documentation or notes can be written in JSON, since JSON doesn&#39;t support comments.</p><div class="language-json" data-ext="json"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#CE9178;">&quot;show_dialog-example&quot;</span><span style="color:#D4D4D4;">: [</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;name&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;SHOW_DIALOG&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;dialog&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;dialog-example-start&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;summary&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;Oh, hi player! This is an example dialog summary!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  },</span></span>
<span class="line"><span style="color:#D4D4D4;">  {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;name&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;SET_ENTITY_INTERACT_SCRIPT&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;entity&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;%SELF%&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;script&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;show_dialog-example-end&quot;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#9CDCFE;">&quot;to do&quot;</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&quot;redo with save flags so the branching persists&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="game-dat" tabindex="-1"><a class="header-anchor" href="#game-dat" aria-hidden="true">#</a> <code>game.dat</code></h2><p>The <code>game.dat</code> file is the binary file containing all your game scenario content, including images.</p><p>Note that <a href="variables#save_data">save data</a> will persist when using the same <code>game.dat</code> file. (Will reflashing the <code>game.dat</code> on the hardware wipe the save data explicitly? Probably. #verifyme)</p><p>There is currently no way to bring save data from an old version of the <code>game.dat</code> to a new one, as the data structure of the save data is unlikely to be consistent between versions.</p><h4 id="run-your-game-dat" tabindex="-1"><a class="header-anchor" href="#run-your-game-dat" aria-hidden="true">#</a> Run Your <code>game.dat</code></h4><ul><li><a href="web_build">Web build</a>: Open the web build in your browser, then drag the <code>game.dat</code> into the browser window. <ul><li>NOTE: If you play the game a little then drag the same <code>game.dat</code> in again, the game will appear to restart afresh â€” but in fact, save flags and the like may not be reset, <strong>even when you didn&#39;t explicitly save inside the game</strong>. Refresh the browser window to wipe existing game state.</li></ul></li><li><a href="desktop_build">Desktop build</a>: If you use the <a href="#cli-encoder">CLI encoder</a> to build the game, the <code>game.dat</code> will already be in the appropriate place to run the game. Otherwise, you must move your new <code>game.dat</code> to the <a href="mage_folder"><code>MAGE</code> folder</a>. <ul><li>(Does the same note above pertain to the desktop build, too? Probably? #verifyme)</li></ul></li><li>Badge: see <a href="updating_the_hardware">Updating the Hardware</a></li></ul><p>Also see: <a href="debug_tools">debug tools</a></p><h2 id="cli-encoder" tabindex="-1"><a class="header-anchor" href="#cli-encoder" aria-hidden="true">#</a> CLI Encoder</h2><p>If you have Node.js installed, you can run the shell script <code>regenerate_dat_file.sh</code> to generate a new <code>game.dat</code> file. There are two versions of this file:</p><ol><li>BM-Badge version: <ul><li><code>cd</code> into <code>MAGE/</code>.</li><li>Run the shell script. The <code>game.dat</code> will be made from the <code>scenario_source_files/</code> in <code>MAGE/</code>.</li></ul></li><li><a href="mge_vm">Sample repo</a> version: <ul><li>first argument: the <code>scenario_source_files/</code> folder to read from</li><li>second argument: where to write the <code>game.dat</code></li><li>This version of the shell script also launches the game automatically.</li></ul></li></ol><p>This encoder is more useful than the web version when you want to test rapid iterations of your game data.</p><h2 id="web-encoder" tabindex="-1"><a class="header-anchor" href="#web-encoder" aria-hidden="true">#</a> Web Encoder</h2><p>Open <code>SD_Card/MAGE/editor/index.html</code> with a web browser.</p><p>Once the page is open, you can either:</p><ol><li>Drag your <a href="mage_folder#scenario_source_files"><code>scenario_source_files</code></a> folder into the window.</li><li>Click the &quot;browse&quot; button and choose the <code>scenario_source_files</code> using your operating system&#39;s file browser.</li></ol><p>Confirm that you want to upload the contents of the folder to your browser, and the encoder will do its magic. If successful, click the &quot;Download game.dat&quot; button, and you&#39;re done!</p><p>The <code>game.dat</code> will be sent to your default download location, so to play it on the desktop build, you&#39;ll first have to move it to the correct place by hand or run the shell script <code>replace_dat_file_with_downloaded.sh</code>. (<code>cd</code> into the <code>SD_Card/MAGE/</code> folder before using the shell script!)</p><p>This encoder is more useful for times you need to <a href="debug_tools">debug something</a>, or when you want to manage an entity&#39;s animations (see below).</p><h3 id="entity-manager" tabindex="-1"><a class="header-anchor" href="#entity-manager" aria-hidden="true">#</a> Entity Manager</h3><p>A special feature of the web version of the encoder is the <a href="tilesets/entity_management_system">entity management system</a>, which you can use to assign animations to <a href="entity_types#character-entity">character entities</a>.</p><h2 id="debugging" tabindex="-1"><a class="header-anchor" href="#debugging" aria-hidden="true">#</a> Debugging</h2><p>(Don&#39;t forget that the game has a built-in <a href="hex_editor">hex editor</a>, too!)</p><h3 id="encoder-console" tabindex="-1"><a class="header-anchor" href="#encoder-console" aria-hidden="true">#</a> Encoder Console</h3><p>Both versions of the encoder will tell you when something has gone wrong during the encoding process, and many errors should be self explanatory, e.g. <code>&quot;No object named X could be found on map Y!&quot;</code></p><p>The error <code>Script: X could not be found in scenario.json</code> does not necessarily mean there is something wrong with <a href="mage_folder#scenario-json"><code>scenario.json</code></a>, only that the encoder couldn&#39;t find a <a href="scripts">script</a> by that name in any MGS file or in any of the script JSON files <code>scenario.json</code> knows about.</p><p>If you get the error &quot;unexpected token&quot; it means one of your files has invalid JSON, and you&#39;ll need to check your JSON files for invalid syntax. (A good text editor should have some kind of color coding to help you spot such errors.)</p><h3 id="inspecting-wip-data" tabindex="-1"><a class="header-anchor" href="#inspecting-wip-data" aria-hidden="true">#</a> Inspecting WIP Data</h3><p>You can use the web encoder and your browser&#39;s JavaScript console to inspect various aspects about how the encoder interpreted your game files. (You could even interrupt the encoder <em>while</em> it collects and processes the data.)</p><ul><li>List of all <a href="variables#save-flags">save flags</a></li><li>Number of colors in each tileset&#39;s pallet. If trying to reduce the file size of your <code>game.dat</code>, it can help to identify which tilesets have more colors than intended.</li><li>â€¦all the rest #expandme</li></ul><p>This is most useful when the encoder throws an exception, because you can examine the state of data involved in triggering the error â€” the console messages alone might not identify which script or variable was causing the problem.</p><h3 id="kaitai" tabindex="-1"><a class="header-anchor" href="#kaitai" aria-hidden="true">#</a> Kaitai</h3>`,38),h={href:"https://ide.kaitai.io",target:"_blank",rel:"noopener noreferrer"},p=o('<p>Available inside your <a href="mage_folder"><code>MAGE</code> Folder</a> is a file called <code>mage_dat.ksy</code>. You can drag this in a Kaitai window, along with your <code>game.dat</code>, to analyze in great detail the encoded structure of your game.</p><p>This tool lets you easily see the relationship between the hex value of a script/entity_type/dialog/etc. and its name. E.g. if an <a href="entities">entity</a>&#39;s <a href="script_slots#on-tick"><code>on_tick</code></a> was being changed unexpectedly, but you only knew the hex value that it&#39;s being changed to (perhaps using the <a href="hex_editor">hex editor</a>, using Kaitai to find the name of the script in question can help you track down the problem.</p>',2);function u(f,g){const t=n("ExternalLinkIcon");return i(),r("div",null,[c,a("p",null,[e("Kaitai ("),a("a",h,[e("ide.kaitai.io"),l(t)]),e(") is a tool that can parse and analyze binary data formats.")]),p])}const m=s(d,[["render",u],["__file","encoder.html.vue"]]);export{m as default};
