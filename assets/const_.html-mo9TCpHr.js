import{_ as n,r as t,o,c as l,b as s,e as a,d as r,w as i,a as c}from"./app-oGoBbKgC.js";const p={},d=c(`<h1 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> <code>const!()</code></h1><p><a href="../../mgs/advanced_mgs_natlang_syntax">Advanced MGS Natlang Syntax</a>.</p><p>This macro emulates compile-time constants. Its main purpose is to help you avoid &quot;magic numbers&quot; in your <a href="../../scripts">script</a> by allowing you to define a <a href="../../mgs/variables/number">number</a>, <a href="../../mgs/variables/string">string</a>, or <a href="../../mgs/variables/boolean">boolean</a> in a single place, even if you need to use it multiple times.</p><p>The macro literally replaces each constant with the token collected during its original value assignment.</p><p>These constants are <em>not</em> meant to be used as variables for in-game logic, as the game will never see the constant as a variable at all, but will only see the token captured by the macro. To emphasize this point, you cannot change the value of a constant once you&#39;ve defined it. If you find yourself wanting to do this, you probably want to be using a <a href="../../scripts/integer_variables">variable</a> instead.</p><p>Inside the above parentheses can be any number of constant assignments:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">[CONST_NAME] = [VALUE]</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><ul><li><code>CONST_NAME</code>: <code>$</code> + <a href="../../mgs/variables/bareword">bareword</a> (e.g. <code>$varName</code>)</li><li><code>VALUE</code>: any <a href="../../mgs/variables_mgs">variable</a> whatsoever, e.g. any <a href="../../mgs/variables/number">number</a>, <a href="../../mgs/variables/string">string</a>, <a href="../../mgs/variables/bareword">bareword</a>, <a href="../../mgs/variables/duration">duration</a>, etc.</li></ul><p>Keep in mind that <code>$</code> is also used in this documentation&#39;s <a href="../../mgs/mgs_natlang">MGS Natlang</a> &quot;dictionary&quot; syntax (e.g. <code>wait $duration</code>), but that is a different usage, as those variables are to be replaced by values of that variable type (e.g. <code>wait 100ms</code>), whereas these constants will appear in the final MGS file literally in the form <code>$_</code>.</p><p>To assign such a constant once while using it multiple times throughout your project, combine this with <a href="include_">include!()</a>.</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">const!</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4FC1FF;">$field</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">x</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4FC1FF;">$bigNumber</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">9001</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4FC1FF;">$hamburgers</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;Steamed Toast&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">testScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#4FC1FF;">$hamburgers</span><span style="color:#D4D4D4;"> $field to </span><span style="color:#4FC1FF;">$bigNumber</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>After the macro does its work, the script <code>testScript</code> instead will read:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">testScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">set</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">entity</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Steamed Toast&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">x</span><span style="color:#D4D4D4;"> to </span><span style="color:#B5CEA8;">9001</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The above is what the MGS Natlang syntax parser will actually parse. Syntax errors (if any) will be caught at that point and not before; the macro literally doesn&#39;t care what the underlying syntax is.</p><h2 id="limitations" tabindex="-1"><a class="header-anchor" href="#limitations" aria-hidden="true">#</a> Limitations</h2>`,16),u=s("code",null,"const!()",-1),h=s("em",null,"in its entirety",-1),y=s("li",null,[a("In addition, this macro only captures single tokens; you cannot use a constant to represent multiple tokens, e.g. "),s("code",null,"const!($parade = 76 trombones);"),a(" will result in a syntax error.")],-1);function D(m,g){const e=t("RouterLink");return o(),l("div",null,[d,s("ul",null,[s("li",null,[u,a(" registers and replaces tokens; it does not find-and-replace arbitrary strings. For this reason, you will not be able to use constants inside a "),r(e,{to:"/mgs/variables/quoted_string.html"},{default:i(()=>[a("quoted_string")]),_:1}),a(", since a quoted string "),h,a(" counts as a single token.")]),y])])}const f=n(p,[["render",D],["__file","const_.html.vue"]]);export{f as default};
