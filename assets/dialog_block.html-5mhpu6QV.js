import{_ as a,o as s,c as n,a as e}from"./app-MrF-XoWp.js";const l={},o=e(`<h1 id="dialog-block" tabindex="-1"><a class="header-anchor" href="#dialog-block" aria-hidden="true">#</a> Dialog Block</h1><p>To define an <a href="../mgs/mgs_natlang">MGS Natlang</a> <a href="../dialogs">dialog</a>, start a new <a href="../mgs/block">block</a> at the root level:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">dialog $dialogName:string {}</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>As these dialog blocks aren&#39;t being defined inside a <a href="../mgs/script_block">script body</a>, a dialog name is required. (The name is whatever is given for <a href="../mgs/variables_mgs#string">string</a>.)</p><p>Inside the curly braces may be any number of <a href="../mgs/dialogs_mgs">dialogs</a>. For example:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">dialog</span><span style="color:#9CDCFE;"> bobTalk</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">Bob</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hi there! I&#39;m speaking to you!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>The pair to the above usage is the action <a href="../actions/SHOW_DIALOG">SHOW_DIALOG</a>:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">bobTalk</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>Defining the dialog externally and &quot;calling&quot; it within a script by name is comparable to what has to be done with game files in raw JSON.</p><h2 id="combination-block" tabindex="-1"><a class="header-anchor" href="#combination-block" aria-hidden="true">#</a> Combination Block</h2><p>You can <a href="../mgs/combination_block">combine</a> these two usages into one with a <a href="../mgs/show_dialog_block">show dialog block</a>:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#DCDCAA;">exampleScript</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">show</span><span style="color:#D4D4D4;"> </span><span style="color:#9CDCFE;">dialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">    </span><span style="color:#4EC9B0;">Bob</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Hi there! I&#39;m speaking to you!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div>`,12),p=[o];function t(c,i){return s(),n("div",null,p)}const d=a(l,[["render",t],["__file","dialog_block.html.vue"]]);export{d as default};
