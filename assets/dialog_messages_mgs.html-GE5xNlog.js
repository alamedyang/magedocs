import{_ as t,r,o as i,c,b as s,d as e,e as n,w as l,a as o}from"./app-MrF-XoWp.js";const p={},d=o(`<h1 id="dialog-messages-mgs" tabindex="-1"><a class="header-anchor" href="#dialog-messages-mgs" aria-hidden="true">#</a> Dialog Messages (MGS)</h1><p>NOTE: This syntax is used for <a href="../mgs/mgs_natlang">MGS Natlang</a> <a href="../mgs/dialogs_mgs">dialogs</a>, not <a href="../dialogs/dialogs_json">JSON dialogs</a>.</p><p>A dialog message is any <a href="../mgs/variables_mgs#quoted-string">quoted string</a>.</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">dialog</span><span style="color:#9CDCFE;"> sampleDialog</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#4EC9B0;">SELF</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">alignment</span><span style="color:#569CD6;"> BOTTOM_RIGHT</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#9CDCFE;">emote</span><span style="color:#D4D4D4;"> </span><span style="color:#B5CEA8;">3</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Messages...&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;So many messages!&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Don&#39;t you think?&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Not really.&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">goto </span><span style="color:#9CDCFE;">script </span><span style="color:#DCDCAA;">sampleScript1</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">&gt;</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Definitely.&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">goto </span><span style="color:#9CDCFE;">script </span><span style="color:#DCDCAA;">sampleScript2</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br></div></div>`,4),u=s("li",null,'Each message is a new "text screen" in the game.',-1),h=s("li",null,"Only ASCII characters will be printed.",-1),g=s("a",{href:"../scripts/printing_current_values"},"current name",-1),D=s("code",null,"%",-1),y=s("code",null,"%PLAYER%",-1),m=s("code",null,"%SELF%",-1),_=s("li",null,[e("Words wrapped in "),s("code",null,"%"),e("s will count as 12 chars when the dialog message is auto-wrapped.")],-1),C=o('<li>Insert the current value of a MGE variable by wrapping its name in <code>$</code>s. <ul><li>Words wrapped in <code>$</code>s will count as 5 chars when the dialog message is auto-wrapped.</li></ul></li><li>Some characters must be escaped in the message body, such as double quote (<code>\\&quot;</code>) (for messages wrapped in double quotes). <ul><li><code>\\t</code> (tabs) are auto-converted to four spaces.</li><li><code>\\n</code> (new lines) are honored, but since text is wrapped automatically, don&#39;t worry about hard wrapping your messages unless you want to put line breaks in arbitrary places.</li><li><code>%</code> and <code>$</code> are printable characters unless <a href="../scripts/printing_current_values">used in pairs</a> within a single line, in which case the only way to print them is to escape them (e.g. <code>\\%</code>).</li></ul></li><li>Word processor &quot;smart&quot; characters such as ellipses (…), em dashes (—), and smart quotes (“”) are auto converted to ASCII equivalents (<code>...</code>) (<code>--</code>) (<code>&quot;</code>).</li>',3);function b(v,w){const a=r("RouterLink");return i(),c("div",null,[d,s("ul",null,[u,h,s("li",null,[e("Insert an entity's "),g,e(" by wrapping their given name in "),D,e("s. "),s("ul",null,[s("li",null,[n(a,{to:"/entities/relative_references.html#player"},{default:l(()=>[y]),_:1}),e(" and "),n(a,{to:"/entities/relative_references.html#self"},{default:l(()=>[m]),_:1}),e(" are also allowed, which target the player entity or the entity that is running the script, respectively.")]),_])]),C])])}const E=t(p,[["render",b],["__file","dialog_messages_mgs.html.vue"]]);export{E as default};
