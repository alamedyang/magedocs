import{_ as a,o as s,c as e,a as l}from"./app-oGoBbKgC.js";const o={},n=l(`<h1 id="serial-dialogs-mgs" tabindex="-1"><a class="header-anchor" href="#serial-dialogs-mgs" aria-hidden="true">#</a> Serial Dialogs (MGS)</h1><p>(For the JSON equivalent, see <a href="../dialogs/serial_dialogs_json">Serial Dialogs (JSON)</a>)</p><p>The <a href="../dialogs/serial_dialogs">serial dialog</a> structure for <a href="../mgs/mgs_natlang">MGS Natlang</a>, found within <a href="../mgs/serial_dialog_block">serial dialog blocks</a> (and related <a href="../mgs/combination_block">combination blocks</a>).</p><p>Serial dialogs contain text meant to be shown via the serial console (<a href="../hardware/terminal">terminal</a>). They are called serial &quot;dialogs&quot; because they are similar to <a href="../dialogs">dialogs</a> in many respects, but they are made up of messages alone and needn&#39;t be used for dialog specifically.</p><h2 id="structure" tabindex="-1"><a class="header-anchor" href="#structure" aria-hidden="true">#</a> Structure</h2><ol><li><a href="../mgs/serial_dialog_parameters_mgs">Serial dialog parameter</a>: 0+</li><li><a href="../mgs/serial_dialog_messages_mgs">Serial dialog message</a>: 1+</li><li><a href="../mgs/serial_dialog_options_mgs">Serial dialog option</a>: 0+</li></ol><p>NOTE: unlike with conventional <a href="../dialogs">dialogs</a>, serial dialog blocks cannot contain more than one serial dialog. In other words, inside a serial dialog block, no parameters can be given after a serial message, and nothing can come after a serial option (except more options).</p><h2 id="example" tabindex="-1"><a class="header-anchor" href="#example" aria-hidden="true">#</a> Example</h2><p>An example <a href="../mgs/mgs_natlang">MGS Natlang</a> <a href="../mgs/serial_dialog_block">serial dialog block</a>:</p><div class="language-mgs" data-ext="mgs"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#569CD6;">serial dialog</span><span style="color:#9CDCFE;"> sample</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#569CD6;">wrap</span><span style="color:#9CDCFE;"> messages</span><span style="color:#D4D4D4;"> to </span><span style="color:#B5CEA8;">60</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#CE9178;">&quot;Hey, can anyone hear me? Hello?&quot;</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">#</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;Yes, I can hear you.&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">goto </span><span style="color:#9CDCFE;">script </span><span style="color:#DCDCAA;">sampleYes</span></span>
<span class="line"><span style="color:#D4D4D4;">  </span><span style="color:#C586C0;">#</span><span style="color:#D4D4D4;"> </span><span style="color:#CE9178;">&quot;What did you say?&quot;</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">:</span><span style="color:#D4D4D4;"> </span><span style="color:#C586C0;">goto </span><span style="color:#9CDCFE;">script </span><span style="color:#DCDCAA;">sampleNo</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span></code></pre></div><p>becomes:</p><div class="language-text" data-ext="text"><pre class="shiki dark-plus" style="background-color:#1E1E1E;" tabindex="0"><code><span class="line"><span style="color:#D4D4D4;">Hey, can anyone hear me? Hello?</span></span>
<span class="line"><span style="color:#D4D4D4;">    0: Yes, I can hear you.</span></span>
<span class="line"><span style="color:#D4D4D4;">    1: What did you say?</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span>
<span class="line"><span style="color:#D4D4D4;">&gt;_</span></span>
<span class="line"><span style="color:#D4D4D4;"></span></span></code></pre></div><p>In the above case, the player is locked out of further action until they give the answer <code>0</code> or <code>1</code>. Failure results in a repeat of the whole serial dialog.</p>`,13),r=[n];function t(i,p){return s(),e("div",null,r)}const d=a(o,[["render",t],["__file","serial_dialogs_mgs.html.vue"]]);export{d as default};
