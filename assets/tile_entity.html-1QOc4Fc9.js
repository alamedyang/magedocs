import{_ as e,o as t,c as i,a as o}from"./app-7-tBH-Mq.js";const n={},a=o('<h1 id="tile-entity" tabindex="-1"><a class="header-anchor" href="#tile-entity" aria-hidden="true">#</a> Tile Entity</h1><p>One of the three <a href="../entities/entity_types">entity types</a>.</p><p>If you place a static (unanimated) tile from a <a href="../Tilesets">tileset</a> onto an object layer in a Tiled <a href="../maps">map</a>, it will become a <strong>tile entity</strong>.</p><div class="custom-container tip"><p class="custom-container-title">NOTE</p><p>If the tile&#39;s <code>Class</code> (formerly <code>Type</code>) property is something defined within <a href="../structure/entity_types.json"><code>entity_types.json</code></a>, it will instead become a <a href="../entities/character_entity">character entity</a>.</p></div><ul><li><strong><code>PrimaryIdType</code></strong>: <code>0</code> (<code>tileset</code>)</li><li><strong><code>PrimaryId</code></strong>: the <code>id</code> of the tileset the entity is using</li><li><strong><code>SecondaryId</code></strong>: the <code>id</code> of the tile on the tileset (the Nth tile, counting left to right and top to down, 0-indexed)</li></ul><p>These are a simple way of making props interactable.</p><p>If you don&#39;t want an interactable prop to be be Y-indexed with other entities when drawn, you could instead put the prop in the map geometry itself and create a <a href="../entities/null_entity">null entity</a> for the interactable aspects.</p>',7),r=[a];function s(c,d){return t(),i("div",null,r)}const h=e(n,[["render",s],["__file","tile_entity.html.vue"]]);export{h as default};
