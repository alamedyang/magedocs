import{_ as a,c as t,o as r,ah as i}from"./chunks/framework.l_r_SdPt.js";const b=JSON.parse('{"title":"State","description":"","frontmatter":{},"headers":[],"relativePath":"state.md","filePath":"state.md"}'),o={name:"state.md"};function l(s,e,d,n,c,h){return r(),t("div",null,[...e[0]||(e[0]=[i('<h1 id="state" tabindex="-1">State <a class="header-anchor" href="#state" aria-label="Permalink to “State”">​</a></h1><p>See also: <a href="./entities.html#entity-properties">Entity Properties</a></p><p>There are only a few variables available for <a href="./scripts.html">scripts</a> to use. All variables are equally accessible to all scripts at all times because they are <a href="./syntax_scopes.html">project scope</a>.</p><p>No need to initialize or define variables before using them; they are all pre-allocated in engine and always available.</p><div class="warning custom-block"><p class="custom-block-title custom-block-title-default">WARNING</p><p>This means that typos in variable names can be hard to spot. If you set <code>birthdayparty</code> but check <code>birthday_party</code>, the encoder will create and store both variables as if they were separate things.</p><p>If you find a variable isn&#39;t triggering logic checks in the ways you expect, check your spelling!</p></div><p>All variables are persistent between <a href="./maps.html#map-loads">map loads</a> because all are all included in the save data.</p><h2 id="warp-state-string" tabindex="-1">Warp State String <a class="header-anchor" href="#warp-state-string" aria-label="Permalink to “Warp State String”">​</a></h2><p>The <code>warp_state</code> string is designated for controlling player spawn behavior on a map&#39;s <code>on_load</code> script. When you leave a room (or otherwise trigger a new map to load), the <code>warp_state</code> string should be set to something that indicates the exit/entrance point so the next map can teleport the player entity to the appropriate spawn point.</p><p>See <a href="./primitive_types.html#string">Primitive Types &gt; String</a></p><h2 id="integer-variables" tabindex="-1">Integer Variables <a class="header-anchor" href="#integer-variables" aria-label="Permalink to “Integer Variables”">​</a></h2><p>These are <code>uint16_t</code> values, meaning they can be any whole number between <code>0</code> and <code>65535</code>. (No negative numbers, no decimal points, no <code>NaN</code>.) You may have up to 255 of these.</p><p>The default value is <code>0</code>.</p><p>These may be printed in a <a href="./dialog_and_serial_dialog_strings.html#print-variable-value">dialog or serial dialog string</a>.</p><p>See: <a href="./primitive_types.html#number-literal">Primitive Types &gt; Number Literal</a></p><h2 id="save-flags" tabindex="-1">Save Flags <a class="header-anchor" href="#save-flags" aria-label="Permalink to “Save Flags”">​</a></h2><p>Save flags are boolean variables. You may have up to 65,536 of these.</p><p>Common use cases for save flags include tracking whether the player has:</p><ul><li>heard specific entities&#39; backstories</li><li>seen specific cutscenes</li><li>completed specific puzzles</li><li>found specific secrets</li></ul><p>See: <a href="./primitive_types.html#boolean">Primitive Types &gt; Boolean</a></p><h2 id="engine-flags" tabindex="-1">Engine Flags <a class="header-anchor" href="#engine-flags" aria-label="Permalink to “Engine Flags”">​</a></h2><h3 id="setable-engine-flags" tabindex="-1">Setable Engine Flags <a class="header-anchor" href="#setable-engine-flags" aria-label="Permalink to “Setable Engine Flags”">​</a></h3><p>Can be used as the LHS of a <a href="./actions.html#assign-bool-value">bool assignment action phrase</a>.</p><table tabindex="0"><thead><tr><th>MGS keyword</th><th>Description</th></tr></thead><tbody><tr><td><code>player_control</code></td><td>When <code>true</code>, the player can move, interact with entities, and use the hex editor (if enabled).</td></tr><tr><td><code>lights_control</code></td><td>When <code>true</code>, the lights around the screen can be controlled manually.</td></tr><tr><td><code>hex_editor</code></td><td>Opens the hex editor when set to <code>true</code>.</td></tr><tr><td><code>hex_dialog_mode</code></td><td>When <code>true</code>, the number of rows in the hex editor is reduced to make room for dialog boxes. Not currently implemented.</td></tr><tr><td><code>hex_control</code></td><td>When <code>true</code>, enables the hex editor for player use.</td></tr><tr><td><code>hex_clipboard</code></td><td>When <code>true</code>, the player can use the hex editor clipboard.</td></tr><tr><td><code>serial_control</code></td><td>When <code>true</code>, the player can use the serial console.</td></tr></tbody></table><h3 id="checkable-engine-flags" tabindex="-1">Checkable Engine Flags <a class="header-anchor" href="#checkable-engine-flags" aria-label="Permalink to “Checkable Engine Flags”">​</a></h3><p>Can be used as <a href="./expressions_and_operators.html#bool-operands">bool operands</a> in a bool expression.</p><table tabindex="0"><thead><tr><th>MGS keyword</th><th>Description</th></tr></thead><tbody><tr><td><code>debug_mode</code></td><td>See <a href="./debug_tools.html#debug-mode">Debug Mode</a>.</td></tr><tr><td><code>dialog open</code></td><td>Checks whether a <a href="./dialogs.html">dialog</a> is open.</td></tr><tr><td><code>serial_dialog open</code></td><td>Checks whether a <a href="./serial_dialogs.html">serial dialog</a> is open.</td></tr></tbody></table><h2 id="save-data" tabindex="-1">Save Data <a class="header-anchor" href="#save-data" aria-label="Permalink to “Save Data”">​</a></h2><p>The state that is preserved when a game is saved includes:</p><ul><li>The <code>warp_state</code> string</li><li>All save flag values (booleans)</li><li>All integer variable values (ints)</li><li>The player&#39;s name (string)</li><li><code>MEM</code> button offsets (the player can change the <code>MEM</code> button mapping)</li><li>Hex editor clipboard contents (up to 32 bytes)</li><li>Current map id (NOTE: this is saved, but not currently used upon load; player position is captured and restored manually in the Black Mage Game).</li></ul>',29)])])}const g=a(o,[["render",l]]);export{b as __pageData,g as default};
