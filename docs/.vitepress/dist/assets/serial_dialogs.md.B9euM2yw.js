import{_ as s,c as a,o as e,ah as l}from"./chunks/framework.l_r_SdPt.js";const k=JSON.parse('{"title":"Serial Dialogs","description":"","frontmatter":{},"headers":[],"relativePath":"serial_dialogs.md","filePath":"serial_dialogs.md"}'),n={name:"serial_dialogs.md"};function t(h,i,p,o,r,d){return e(),a("div",null,[...i[0]||(i[0]=[l(`<h1 id="serial-dialogs" tabindex="-1">Serial Dialogs <a class="header-anchor" href="#serial-dialogs" aria-label="Permalink to “Serial Dialogs”">​</a></h1><p><a href="./syntax_scopes.html#project-scope">Project scope</a>.</p><p>Serial dialogs contain text meant to be shown via the <a href="./terminal.html">serial console terminal</a>. They are called serial &quot;dialogs&quot; because they are similar to <a href="./dialogs.html">dialogs</a> in many respects, but they are made up of text alone (as opposed to being accompanied by images and labels) and needn&#39;t be used for dialog specifically.</p><h2 id="serial-dialog-definition" tabindex="-1">Serial Dialog Definition <a class="header-anchor" href="#serial-dialog-definition" aria-label="Permalink to “Serial Dialog Definition”">​</a></h2><p>Defined at <a href="./syntax_scopes.html#syntax-contexts">root level of the file</a>.</p><p><strong>Syntax</strong>: <code>serial dialog &lt;serial dialog name: string&gt; { &lt;serial dialog&gt; }</code></p><h2 id="serial-dialog-literal" tabindex="-1">Serial Dialog Literal <a class="header-anchor" href="#serial-dialog-literal" aria-label="Permalink to “Serial Dialog Literal”">​</a></h2><p>Serial dialogs can be defined at the point of use with serial dialog literals. If a name is not provided, one will be generated based on the file name and line number.</p><ul><li><strong>Syntax</strong>: <ul><li><code>{ &lt;serial dialog&gt; }</code></li><li><code>&lt;name: string&gt; { &lt;serial dialog&gt; }</code></li></ul></li></ul><p>NOTE: Unlike <a href="./dialogs.html">dialogs</a>, serial dialog blocks may only contain one dialog.</p><h2 id="serial-dialog" tabindex="-1">Serial Dialog <a class="header-anchor" href="#serial-dialog" aria-label="Permalink to “Serial Dialog”">​</a></h2><p>The following sequence:</p><ol><li><a href="#serial-dialog-parameter">Serial dialog parameter</a>: 0+</li><li><a href="#serial-dialog-message">Serial dialog messages</a>: 1+</li><li><a href="#serial-dialog-option">Serial dialog option</a>: 0+</li></ol><h3 id="serial-dialog-parameter" tabindex="-1">Serial Dialog Parameter <a class="header-anchor" href="#serial-dialog-parameter" aria-label="Permalink to “Serial Dialog Parameter”">​</a></h3><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">serial_dialog</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> sample</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line highlighted"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">  wrap</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> messages</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> to</span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;"> 60</span></span>
<span class="line"><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">  &quot;Hey, can anyone hear me? Hello?&quot;</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  #</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;Yes, I can hear you.&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sample_yes</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  #</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;What did you say?&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sample_no</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><p>Serial dialog parameters are a serial dialog property and value pair. Multiple serial dialog parameters can occur back-to-back in a single serial dialog block or a <a href="./dialog_and_serial_dialog_settings.html">serial dialog settings block</a>.</p><p><strong>Syntax</strong>:</p><ul><li><code>wrap &lt;number&gt;</code><ul><li><a href="./primitive_types.html#number">Number</a>: the number of chars to auto wrap the contents of serial dialog messages.</li><li>80 is default.</li></ul></li></ul><h3 id="serial-dialog-message" tabindex="-1">Serial Dialog Message <a class="header-anchor" href="#serial-dialog-message" aria-label="Permalink to “Serial Dialog Message”">​</a></h3><p>Serial dialog messages are text that is to be printed in the serial console.</p><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">serial_dialog</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> sample</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">  wrap</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> messages</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> to</span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;"> 60</span></span>
<span class="line highlighted"><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">  &quot;Hey, can anyone hear me? Hello?&quot;</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  #</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;Yes, I can hear you.&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sample_yes</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  #</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;What did you say?&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sample_no</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><ul><li>Wrapped in quotes.</li><li>Each serial dialog message will get a newline added to the end unless <code>concat</code> is used when showing the dialog.</li><li>To maximize compatibility, best to limit these to ASCII characters.</li><li>These strings are auto-wrapped and have other abilities and attributes, including variable value insertion, sanitization, and <a href="./dialog_and_serial_dialog_strings.html#ansi-escape-sequences">ANSI styles</a>. See <a href="./dialog_and_serial_dialog_strings.html">Dialog and Serial Dialog Strings</a>.</li></ul><h3 id="serial-dialog-option" tabindex="-1">Serial Dialog Option <a class="header-anchor" href="#serial-dialog-option" aria-label="Permalink to “Serial Dialog Option”">​</a></h3><ul><li>A single serial dialog can only use one of the two types of option (multiple choice or free response). <ul><li>The MGS parser will interpret all options within the block using the type of the first option.</li></ul></li><li>Unlike <a href="./dialogs.html#dialog-option">dialog options</a>, the option quantity for serial dialogs is unlimited.</li></ul><p><strong>Syntax</strong>:</p><ul><li><code>&lt;cursor&gt; &lt;label: serial dialog string&gt; = &lt;script: string[]&gt;</code></li><li><code>&lt;cursor&gt; &lt;label: serial dialog string&gt; = &lt;script literal&gt;</code></li><li><strong>Cursor</strong>: one of the following: <ul><li><code>_</code>: Free response.</li><li><code>#</code>: Multiple choice.</li><li><strong>Labels</strong> are <a href="./dialog_and_serial_dialog_strings.html">styleable</a>.</li></ul></li></ul><h3 id="multiple-choice-option-examples" tabindex="-1">Multiple Choice Option Examples <a class="header-anchor" href="#multiple-choice-option-examples" aria-label="Permalink to “Multiple Choice Option Examples”">​</a></h3><ul><li>The console will display a numbered list of the option labels. If the player types the number of one of the options, the given script will run in the current script slot.</li><li>The player cannot proceed until they enter a valid number, at which point the game will jump to the corresponding script. Failure results in a repeat of the same serial dialog again. That means this type of option will <em>always</em> result in a script jump.</li></ul><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">serial_dialog</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> sample</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">  wrap</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> messages</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> to</span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;"> 60</span></span>
<span class="line"><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">  &quot;Hey, can anyone hear me? Hello?&quot;</span></span>
<span class="line highlighted"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  #</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;Yes, I can hear you.&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sample_yes</span></span>
<span class="line highlighted"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  #</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;What did you say?&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sample_no</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><p>The above example becomes:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span>Hey, can anyone hear me? Hello?</span></span>
<span class="line"><span>  0: Yes, I can hear you.</span></span>
<span class="line"><span>  1: What did you say?</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt;_</span></span></code></pre></div><h3 id="free-response" tabindex="-1">Free Response <a class="header-anchor" href="#free-response" aria-label="Permalink to “Free Response”">​</a></h3><ul><li>At the prompt, the player types in whatever they like. If what they typed matches the label, the given script will run in the current script slot.</li><li>If they did not type something valid, the next action (underneath the show or concat serial dialog action) will execute.</li><li>The user&#39;s response is case insensitive. (The label <code>&quot;CAT&quot;</code> will match the user input of <code>cat</code>.)</li></ul><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">serial_dialog</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> sphinx</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">  &quot;When you arrive at the Sphinx,&quot;</span></span>
<span class="line"><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">  &quot;it speaks in a slow, monotone voice:&quot;</span></span>
<span class="line"><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">  &quot;WHEN DO THE FLYING TOASTERS COME OUT?&quot;</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  _</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;after dark&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sphinxSuccess</span></span>
<span class="line highlighted"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">  _</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> &quot;before dark&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sphinxWTF</span></span>
<span class="line highlighted"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><p>The above example becomes:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span>When you arrive at the Sphinx,</span></span>
<span class="line"><span>it speaks in a slow, monotone voice:</span></span>
<span class="line"><span>WHEN DO THE FLYING TOASTERS COME OUT?</span></span>
<span class="line"><span></span></span>
<span class="line"><span>&gt;_</span></span></code></pre></div>`,36)])])}const c=s(n,[["render",t]]);export{k as __pageData,c as default};
