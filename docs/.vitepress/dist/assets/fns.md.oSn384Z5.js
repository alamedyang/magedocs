import{_ as i,c as a,o as n,ah as t}from"./chunks/framework.l_r_SdPt.js";const g=JSON.parse('{"title":"Fns","description":"","frontmatter":{},"headers":[],"relativePath":"fns.md","filePath":"fns.md"}'),h={name:"fns.md"};function l(e,s,p,k,r,d){return n(),a("div",null,[...s[0]||(s[0]=[t(`<h1 id="fns" tabindex="-1">Fns <a class="header-anchor" href="#fns" aria-label="Permalink to “Fns”">​</a></h1><p><a href="./syntax_scopes.html#file-scope">File scope</a>.</p><p>Fn calls copy all items from the fn definition, swapping out values from the args in the definition with the args in the fn call, and pastes them into place.</p><p>This makes them similar to <a href="./macros.html#copy-script">Copy Script</a>, except that Copy Script cannot do any token replacement. For this reason, fns must have at least 1 arg.</p><p>Fns can <a href="./script_control_flow.html#return">return</a> a value, change the value of global variables, or both.</p><p>Fns are not functions as there is no call stack. (They are inline functions, if anything.) Still, they are called fns because the word &quot;<a href="./macros.html">macro</a>&quot; is already used for other MGS concepts, and though they feel like functions when you use them they are not <em>real</em> functions.</p><p>In a fn body, constants are first checked against the args registered between the definition and the call. If not found, they are checked against the file&#39;s <a href="./constants.html">constant</a> registry.</p><p>You may use fn args inside a deeper fn call, however, the parent fn args are not available to the child call unless handed down again via args.</p><h2 id="fn-definition" tabindex="-1">Fn Definition <a class="header-anchor" href="#fn-definition" aria-label="Permalink to “Fn Definition”">​</a></h2><p>Defined at <a href="./syntax_scopes.html#syntax-contexts">root level of the file</a>.</p><p><strong>Syntax</strong>: <code>fn &lt;fn name: string&gt; ( &lt;fn args&gt; ) { &lt;script body items&gt; }</code></p><ul><li><strong>Fn args</strong>: comma-separated <a href="./primitive_types.html#constant">constants</a>.</li><li><strong>Script body items</strong>: see <a href="./scripts.html#script-body-items">Script Body Items</a>.</li></ul><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// example</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">fn </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">add_two</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$n</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) { </span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">return</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $n</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">2</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">; }</span></span></code></pre></div><h2 id="fn-literal" tabindex="-1">Fn Literal <a class="header-anchor" href="#fn-literal" aria-label="Permalink to “Fn Literal”">​</a></h2><p>Fns can be defined in place (anonymously) using this syntax inside the <a href="./arrays.html#array-methods">array methods</a> <code>.map()</code> and <code>.for_each()</code>.</p><p><strong>Syntax</strong>: <code>( &lt;fn args&gt; ) { &lt;script body items&gt; }</code></p><ul><li><strong>Fn args</strong>: comma-separated <a href="./primitive_types.html#constant">constants</a>.</li><li><strong>Script body items</strong>: see <a href="./scripts.html#script-body-items">Script Body Items</a>.</li></ul><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// example in an array expression</span></span>
<span class="line"><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">_</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">	array</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> tens</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">ones</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">map</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">((</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$n</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) { </span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">return</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $n</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> * </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">10</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">; });</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><h2 id="fn-call" tabindex="-1">Fn Call <a class="header-anchor" href="#fn-call" aria-label="Permalink to “Fn Call”">​</a></h2><p>Used inside a <a href="./scripts.html#script-body-items">script body</a>.</p><p><strong>Syntax</strong>: <code>&lt;fn name: string&gt;(&lt;passed args&gt;)</code></p><ul><li><strong>Passed args</strong>: One or more of the following, comma-separated: <ul><li><a href="./expressions_and_operators.html#expressions">Int expressions</a></li><li><a href="./primitive_types.html#boolean">Booleans</a></li><li><a href="./primitive_types.html#string">Strings</a></li><li><a href="./primitive_types.html#constant">Constants</a></li></ul></li></ul><p>Bare fn calls only have utility if the fn performs work; the return value of bare fns is discarded.</p><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// example</span></span>
<span class="line"><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">_</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">	pause_entity_walk</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">&quot;Bob&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">)</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><p>Fn calls can be used as an <a href="./expressions_and_operators.html#int-operands">int operand</a> in <a href="./expressions_and_operators.html#expressions">expressions</a>. This only has utility if the fn returns a value.</p><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// example</span></span>
<span class="line"><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">_</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	player</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> x</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sanitize_x</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">player</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> x</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	player</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> y</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sanitize_y</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">player</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> y</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) + </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">10</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to “Example”">​</a></h2><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">fn </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">diff</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$a</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$b</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">	if</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$a</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> &gt; </span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$b</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) { </span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">return</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $a</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> - </span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$b</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">; }</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">	if</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$a</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> &lt; </span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$b</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) { </span><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">return</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $b</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> - </span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$a</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">; }</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">	return</span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;"> 0</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">fn </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">get_manhattan_distance</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$e1</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;">$e2</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">	x_diff</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">diff</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">entity</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $e1</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> x</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">entity</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $e2</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> x</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">	y_diff</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">diff</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">entity</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $e1</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> y</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">entity</span><span style="--shiki-dark:#4FC1FF;--shiki-light:#0070C1;"> $e2</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> y</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">	return</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> x_diff</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> + </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">y_diff</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-dark:#6A9955;--shiki-light:#008000;">// Teleports an entity to the player if the player gets too far away.</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">script </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">on_tick_yank</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">	manhattan</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">get_manhattan_distance</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">(</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">%PLAYER%</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;</span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">%SELF%</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">);</span></span>
<span class="line"><span style="--shiki-dark:#C586C0;--shiki-light:#AF00DB;">	if</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> (</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">manhattan</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> &gt; </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">80</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">) {</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">		self</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> position</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">player</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> position</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">	}</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	self</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> direction</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">player</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div>`,28)])])}const y=i(h,[["render",l]]);export{g as __pageData,y as default};
