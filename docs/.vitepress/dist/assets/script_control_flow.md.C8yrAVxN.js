import{_ as o,c as i,o as t,ah as l}from"./chunks/framework.l_r_SdPt.js";const g=JSON.parse('{"title":"Script Control Flow","description":"","frontmatter":{},"headers":[],"relativePath":"script_control_flow.md","filePath":"script_control_flow.md"}'),n={name:"script_control_flow.md"};function a(s,e,r,c,d,h){return t(),i("div",null,[...e[0]||(e[0]=[l(`<h1 id="script-control-flow" tabindex="-1">Script Control Flow <a class="header-anchor" href="#script-control-flow" aria-label="Permalink to “Script Control Flow”">​</a></h1><p>These structures appear inside <a href="./scripts.html">script bodies</a>, as well as anywhere else that can contain script body items, like <a href="./script_control_flow.html">looping blocks</a> and fn bodies.</p><h2 id="return" tabindex="-1">Return <a class="header-anchor" href="#return" aria-label="Permalink to “Return”">​</a></h2><ul><li><code>return</code> is an index jump to the bottom of the current script. This terminates the script early.</li><li>If a value is given after the keyword <code>return</code>, that value will be put into the &quot;return register&quot; (a dedicated int variable), where the caller, if any, can receive it. <ul><li>After the caller receives the returned value, the return register is set back to <code>0</code>.</li></ul></li><li>Scripts and fns can both return values.</li><li><strong>Syntax:</strong><ul><li><code>return;</code></li><li><code>return &lt;int expression&gt;;</code></li></ul></li></ul><h2 id="if-else-chain" tabindex="-1">If / Else Chain <a class="header-anchor" href="#if-else-chain" aria-label="Permalink to “If / Else Chain”">​</a></h2><ul><li>An if chain is an <code>if</code> block, any number of <code>else if</code> blocks, then an optional <code>else</code> block.</li><li>If an <code>if</code> or <code>else if</code> condition is met, no other conditions in that chain is checked.</li><li><code>else</code> defines behavior that happens if none of the above <code>if</code> or <code>else if</code> conditions are met.</li><li><strong>Syntax:</strong><ul><li><strong>If block</strong>: <ul><li><code>if (&lt;condition: boolean expression&gt;) { &lt;script body items&gt; }</code></li></ul></li><li><strong>Else if block</strong>: <ul><li><code>else if (&lt;condition: boolean expression&gt;) { &lt;script body items&gt; }</code></li></ul></li><li><strong>Else block</strong>: <ul><li><code>else { &lt;script body items&gt; }</code></li></ul></li></ul></li><li><strong>Boolean expression</strong>: see <a href="./expressions_and_operators.html#bool-expressions">Boolean Expressions</a></li></ul><h2 id="if-single" tabindex="-1">If Single <a class="header-anchor" href="#if-single" aria-label="Permalink to “If Single”">​</a></h2><ul><li>This is a simpler branching syntax meant for printing expanded output, not for writing outright.</li><li><strong>Syntax:</strong><ul><li><code>if &lt;simple condition&gt; then goto &lt;script name: string&gt;;</code></li><li><code>if &lt;simple condition&gt; then goto script &lt;script name: string&gt;;</code></li><li><code>if &lt;simple condition&gt; then goto label &lt;bareword&gt;;</code></li><li><code>if &lt;simple condition&gt; then goto index &lt;number&gt;;</code></li></ul></li><li>A simple condition is a <a href="./expressions_and_operators.html#bool-expressions">boolean expressions</a> with a direct counterpart to a bytecode action. <ul><li>I&#39;m not going to write these out, as there&#39;s not much point doing it, but if you must find which kinds of comparisons are legal here, it&#39;s the parameters in bytecode actions that start with <code>CHECK_</code> .</li></ul></li></ul><h2 id="while-block" tabindex="-1">While Block <a class="header-anchor" href="#while-block" aria-label="Permalink to “While Block”">​</a></h2><p><strong>Syntax</strong>: <code>while (&lt;condition: boolean expression&gt;) { &lt;looping body items&gt; }</code></p><ul><li>Loops over the items in the while body as long as the while <a href="./expressions_and_operators.html#bool-expressions">condition</a> is true.</li><li>The condition is checked at the beginning of each loop and at no other time, i.e. the loop is not aborted if the condition becomes false partway through the loop.</li><li>If the condition is false on the first loop, the while body is never executed.</li><li>Looping body items are the same as script body items, with two additions: <ul><li><strong>Continue</strong>: Stops the current loop and jumps ahead to the beginning of the next loop. <ul><li><code>continue;</code></li></ul></li><li><strong>Break</strong>: Stops the loop altogether. <ul><li><code>break;</code></li></ul></li><li>Continue and break only work on their own loop, not any parent loops. (Cannot <code>break</code> to a labeled loop.) If you want this behavior, you must use label definitions and <code>goto label &lt;string&gt;;</code>.</li></ul></li></ul><h2 id="do-while-block" tabindex="-1">Do While Block <a class="header-anchor" href="#do-while-block" aria-label="Permalink to “Do While Block”">​</a></h2><p>Like a <a href="#while-block">while block</a>, except that the body items are guaranteed to be executed at least once.</p><p><strong>Syntax</strong>: <code>do { &lt;looping body items&gt; } while (&lt;condition: boolean expression&gt;)</code></p><h2 id="for-block" tabindex="-1">For Block <a class="header-anchor" href="#for-block" aria-label="Permalink to “For Block”">​</a></h2><p><strong>Syntax</strong>: <code>for (&lt;initializer&gt;; &lt;condition&gt;; &lt;incrementer&gt;) { &lt;looping body items&gt; }</code></p><ul><li><strong>Initializer</strong>: Can be any <a href="./actions.html">action item</a>, but should be used for setting the initial value of the variable being used to manage the loop, e.g. <code>i = 0</code></li><li><strong>Condition</strong>: A <a href="./expressions_and_operators.html#bool-expressions">boolean expression</a>. The for loop will continue while the condition is true.</li><li><strong>Incrementer</strong>: Can be any <a href="./actions.html">action item</a>, but should be used for incrementing the variable being used to manage the loop, e.g. <code>i += 1</code></li><li>There must be a semicolon separating these things. <ul><li>Normally action items end in a semicolon, but these do not, because the separator semicolon serves the same purpose.</li><li>The final action item does not end in a semicolon.</li></ul></li></ul><p>Fun fact, a for block is effectively a <a href="#while-block">while block</a> with extra steps:</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span>&lt;initializer&gt;</span></span>
<span class="line"><span>while (&lt;condition&gt;) {</span></span>
<span class="line"><span>	&lt;looping body items&gt;</span></span>
<span class="line"><span>	&lt;incrementer&gt;</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="label-definitions" tabindex="-1">Label Definitions <a class="header-anchor" href="#label-definitions" aria-label="Permalink to “Label Definitions”">​</a></h2><p>Labels are a means of setting destinations for jump actions. These are <a href="./scripts.html">script level</a>.</p><p><strong>Syntax</strong>: <code>&lt;bareword&gt;:</code></p>`,22)])])}const b=o(n,[["render",a]]);export{g as __pageData,b as default};
