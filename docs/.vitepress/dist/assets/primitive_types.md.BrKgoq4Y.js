import{_ as a,c as o,o as i,ah as t}from"./chunks/framework.l_r_SdPt.js";const m=JSON.parse('{"title":"Primitive Types","description":"","frontmatter":{},"headers":[],"relativePath":"primitive_types.md","filePath":"primitive_types.md"}'),r={name:"primitive_types.md"};function l(n,e,d,c,s,u){return i(),o("div",null,[...e[0]||(e[0]=[t('<h1 id="primitive-types" tabindex="-1">Primitive Types <a class="header-anchor" href="#primitive-types" aria-label="Permalink to “Primitive Types”">​</a></h1><p>If a value (e.g. an arg or param) is said to be limited to a primitive value, it is usually one of these: string, number, boolean. Sometimes this also includes constants.</p><p>No type coercion:</p><ul><li>Ints and strings cannot be coerced to bools. (No checking the truthiness of <code>0</code>!)</li><li>Bools and ints cannot be printed as strings. (No <code>toString()</code>!)</li><li>Strings can only be set or checked, and cannot be parsed in any way. (No <code>parseInt()</code>!)</li></ul><h2 id="string" tabindex="-1">String <a class="header-anchor" href="#string" aria-label="Permalink to “String”">​</a></h2><p>A <strong>string</strong> can be either a bareword or a quoted string.</p><h3 id="bareword" tabindex="-1">Bareword <a class="header-anchor" href="#bareword" aria-label="Permalink to “Bareword”">​</a></h3><p>Regex: <code>/[_a-zA-Z][_a-zA-Z0-9]*/</code></p><ul><li>Any number of alphanumeric characters or underscore.</li><li>A number may not be the first character.</li></ul><h3 id="quoted-string" tabindex="-1">Quoted String <a class="header-anchor" href="#quoted-string" aria-label="Permalink to “Quoted String”">​</a></h3><p>Regex: <code>/&quot;(?:[^&quot;\\]|\\.)*&quot;/</code></p><ul><li>Any characters within a pair of double quotes.</li><li>May contain escaped quotes (<code>\\&quot;</code>).</li><li><a href="./dialogs.html">Dialog</a> and <a href="./serial_dialogs.html">serial dialog</a> messages are quoted strings, but they have <a href="./dialog_and_serial_dialog_strings.html">Extra attributes</a> primarily having to do with styling and auto-wrapping.</li></ul><h2 id="number" tabindex="-1">Number <a class="header-anchor" href="#number" aria-label="Permalink to “Number”">​</a></h2><ul><li>&quot;Number&quot; usually refers to a <strong>number literal</strong> specifically.</li><li>Number suffixes must be attached to the number itself, i.e. one token. Otherwise the suffix would count as a separate bareword.</li></ul><h3 id="number-literal" tabindex="-1">Number Literal <a class="header-anchor" href="#number-literal" aria-label="Permalink to “Number Literal”">​</a></h3><ul><li>Sometimes called &quot;int&quot; in these docs.</li><li>A <code>u16</code>, i.e. any positive whole number up to 65535.</li></ul><h3 id="duration" tabindex="-1">Duration <a class="header-anchor" href="#duration" aria-label="Permalink to “Duration”">​</a></h3><ul><li>Any number with optional suffixes <code>ms</code> for milliseconds or <code>s</code> for seconds.</li></ul><h3 id="distance" tabindex="-1">Distance <a class="header-anchor" href="#distance" aria-label="Permalink to “Distance”">​</a></h3><ul><li>Any number with optional suffixes <code>pix</code> or <code>px</code> for pixels.</li></ul><h3 id="quantity" tabindex="-1">Quantity <a class="header-anchor" href="#quantity" aria-label="Permalink to “Quantity”">​</a></h3><ul><li>Any number with optional suffix <code>x</code>.</li><li>The words <code>once</code>, <code>twice</code>, or <code>thrice</code>.</li></ul><h3 id="color" tabindex="-1">Color <a class="header-anchor" href="#color" aria-label="Permalink to “Color”">​</a></h3><ul><li>Any CSS-style hexadecimal color value (e.g. <code>#FF0000</code>) using upper or lowercase letters. <ul><li>These can be 3 or 6 digits (e.g. <code>#a0b</code> or <code>#aa00bb</code>).</li></ul></li><li>The words <code>white</code>, <code>black</code>, <code>red</code>, <code>green</code>, <code>blue</code>, <code>magenta</code>, <code>cyan</code>, or <code>yellow</code>.</li></ul><h2 id="boolean" tabindex="-1">Boolean <a class="header-anchor" href="#boolean" aria-label="Permalink to “Boolean”">​</a></h2><ul><li>Sometimes called &quot;bools&quot; in these docs.</li><li><code>true</code> and <code>false</code> are the traditional values, but other natural language words are allowed because these make certain <a href="./state.html#engine-flags">engine flags</a> easier to understand when setting them or checking them, e.g. <code>debug_mode == on</code>.</li><li><strong>True values</strong>: <code>true</code>, <code>on</code>, <code>open</code>, and <code>up</code>.</li><li><strong>False values</strong>: <code>false</code>, <code>off</code>, <code>closed</code>, and <code>down</code>.</li></ul><h2 id="constant" tabindex="-1">Constant <a class="header-anchor" href="#constant" aria-label="Permalink to “Constant”">​</a></h2><p>Regex: <code>\\$[_a-zA-Z0-9]+/</code></p><ul><li>A single <code>$</code> followed by any number of alphanumeric characters or underscores (<code>_</code>).</li><li>This must be a single token, i.e. <code>$const_name</code>, not <code>$ const_name</code>.</li></ul>',29)])])}const b=a(r,[["render",l]]);export{m as __pageData,b as default};
