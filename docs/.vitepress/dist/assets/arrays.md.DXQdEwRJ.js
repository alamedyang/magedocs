import{_ as a,c as i,o as t,ah as s}from"./chunks/framework.l_r_SdPt.js";const g=JSON.parse('{"title":"Arrays","description":"","frontmatter":{},"headers":[],"relativePath":"arrays.md","filePath":"arrays.md"}'),r={name:"arrays.md"};function n(l,e,o,d,h,c){return t(),i("div",null,[...e[0]||(e[0]=[s(`<h1 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-label="Permalink to “Arrays”">​</a></h1><p>Arrays are built, modified, and destroyed inside <a href="./scripts.html">scripts</a> using <a href="./actions.html">actions</a>.</p><ul><li>Arrays may only contain 256 items.</li><li>Arrays can only contain positive ints (with a max value of 65536), the same as <a href="./state.html#integer-variables">integer variables</a>. <ul><li>Array values can be assigned using <a href="./expressions_and_operators.html#int-expressions">int expressions</a>, e.g. <code>odd_numbers.push(9 + two);</code>.</li></ul></li><li>Array literals (a list of items inside brackets, e.g. <code>[1, 2, 3]</code>) are only allowed when making a new array. Anywhere else, these are interpreted as action param expansions.</li><li>Arrays are initialized per game session, as opposed to per map load or per game save. Neither arrays nor their values are stored in the save data.</li><li>Undefined array lookups (such as reading from an out-of-bounds index) will become 0.</li></ul><h2 id="array-indices" tabindex="-1">Array Indices <a class="header-anchor" href="#array-indices" aria-label="Permalink to “Array Indices”">​</a></h2><ul><li>Indices may be made from a bare variable name or an int expression. <ul><li>E.g. <code>next_value = array_name[i + 1];</code></li></ul></li><li>Negative indices read values from the end. <ul><li>E.g. <code>penultimate_value = array_name[-2];</code></li></ul></li></ul><h2 id="array-action-phrases" tabindex="-1">Array Action Phrases <a class="header-anchor" href="#array-action-phrases" aria-label="Permalink to “Array Action Phrases”">​</a></h2><h3 id="create" tabindex="-1">Create <a class="header-anchor" href="#create" aria-label="Permalink to “Create”">​</a></h3><p>Makes a new array by the given name. If you make a new array when one already exists by that name, the old array will be overwritten.</p><ul><li><strong>Syntax</strong>: <code>array &lt;name: string&gt; = &lt;initial value&gt;;</code><ul><li><strong>Initial value</strong>: <ul><li>0+ comma-separated int expressions, wrapped in <code>[]</code></li><li><a href="#returns-an-array">Array method chain that returns an array</a> (as opposed returning a value or nothing).</li></ul></li></ul></li><li><strong>Bytecode action</strong>: <code>ARRAY_NEW</code></li></ul><h3 id="delete" tabindex="-1">Delete <a class="header-anchor" href="#delete" aria-label="Permalink to “Delete”">​</a></h3><p>Deletes named array(s). If the array already doesn&#39;t exist, nothing will happen.</p><ul><li><strong>Syntax</strong>: <code>delete array &lt;string[]&gt;;</code></li><li><strong>Bytecode action</strong>: <code>ARRAY_DELETE</code></li></ul><h3 id="print" tabindex="-1">Print <a class="header-anchor" href="#print" aria-label="Permalink to “Print”">​</a></h3><p>Prints the array(s)&#39;s values to the serial console.</p><ul><li><strong>Syntax</strong>: <code>print array &lt;string[]&gt;;</code></li><li><strong>Bytecode action</strong>: <code>ARRAY_LOG</code></li></ul><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">script </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">array_gamut</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">	array</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> odd_numbers</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = [</span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">3</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">1</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">9</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">7</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">, </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">5</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">];</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">	array</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> sorted</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> = </span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;">odd_numbers</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">.</span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">sort</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">();</span></span>
<span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">	delete</span><span style="--shiki-dark:#9CDCFE;--shiki-light:#001080;"> array</span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;"> odd_numbers</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><h2 id="array-methods" tabindex="-1">Array Methods <a class="header-anchor" href="#array-methods" aria-label="Permalink to “Array Methods”">​</a></h2><p>Array methods act upon an array by changing it, extracting one or more values from it, performing other logical work on it, or any combination of these things.</p><ul><li>Array methods can be daisy chained. <ul><li>E.g. <code>array_name.sort().reverse().map(do_function).pop();</code>.</li></ul></li><li>The return result of the chain depends on the return type of the final method.</li><li>The chain will work even if the methods are split up with white space (i.e. put onto different lines).</li></ul><h3 id="returns-an-array" tabindex="-1">Returns an Array <a class="header-anchor" href="#returns-an-array" aria-label="Permalink to “Returns an Array”">​</a></h3><ul><li><strong>Sort</strong>: Changes an array by sorting its values numerically, ascending. <ul><li><code>.sort()</code></li></ul></li><li><strong>Reverse</strong>: Changes an array by reversing the order of its values. <ul><li><code>.reverse()</code></li></ul></li><li><strong>Slice</strong>: Makes a copy of the array in its current state. <ul><li><code>.slice()</code>: Copies the array whole.</li><li><code>.slice(&lt;index start&gt;)</code>: Copies starting at the given index.</li><li><code>.slice(&lt;index start&gt;, &lt;index end&gt;)</code>: Copies starting at the given start index and ending on the given end index.</li></ul></li><li><strong>Map</strong>: Creates a new array with the same length as the current array by performing the given fn on each of the array items. <ul><li><code>.map(&lt;fn literal&gt;)</code></li><li>The default args provided to the mapping fn are: <ul><li>1st arg: the value of the current item</li><li>2nd arg: current loop index</li><li>3rd arg: the name of the array itself</li></ul></li><li>Not all 3 args must be used, and they may be named anything in the fn definition (as long as they are constants); the order of the fn args is what determine which of these three values they receive.</li><li>The mapping fn cannot use <code>continue</code> or <code>break</code>. You may <code>return</code> early to jump to the next loop, but the loop must play out in its entirety.</li><li>If the mapping fn does not return anything, the value of the new array at that index will be 0.</li></ul></li></ul><p><strong>Bytecode actions</strong>:</p><ul><li><code>ARRAY_SORT</code></li><li><code>ARRAY_REVERSE</code></li><li><code>ARRAY_SLICE</code></li><li><code>ARRAY_SLICE_BY_VARIABLE</code></li><li><code>ARRAY_SLICE_TWICE</code></li><li><code>ARRAY_SLICE_TWICE_BY_VARIABLE</code></li></ul><h3 id="returns-a-value-int" tabindex="-1">Returns a Value (int) <a class="header-anchor" href="#returns-a-value-int" aria-label="Permalink to “Returns a Value (int)”">​</a></h3><ul><li><strong>Value at index</strong>: Returns the value of the array at that index. <ul><li><code>[&lt;int expression&gt;]</code></li></ul></li><li><strong>Length</strong>: Returns the length of the array, i.e. the quantity of items it currently contains. <ul><li><code>.length()</code></li></ul></li><li><strong>Pop</strong>: Removes the final item in the array and returns it. <ul><li><code>.pop()</code></li></ul></li><li><strong>Pop Left</strong>: Removes the first item in the array and returns it. <ul><li><code>.pop_left()</code></li></ul></li></ul><p><strong>Bytecode actions</strong>:</p><ul><li><code>ARRAY_READ_FROM_INDEX_INTO_VARIABLE</code></li><li><code>ARRAY_READ_FROM_VARIABLE_INDEX_INTO_VARIABLE</code></li><li><code>ARRAY_LENGTH_INTO_VARIABLE</code></li><li><code>ARRAY_POP_INTO_VARIABLE</code></li><li><code>ARRAY_POP_LEFT_INTO_VARIABLE</code></li></ul><h3 id="returns-nothing" tabindex="-1">Returns Nothing <a class="header-anchor" href="#returns-nothing" aria-label="Permalink to “Returns Nothing”">​</a></h3><ul><li><strong>Syntax</strong>: <ul><li><strong>Push</strong>: Adds the given value to the end of the array. <ul><li><code>.push(&lt;int expression[]&gt;)</code></li></ul></li><li><strong>Push Left</strong>: Adds the given value to the beginning of the array. <ul><li>\`.push_left(&lt;int expression[]&gt;)</li></ul></li><li><strong>For Each</strong>: Performs the given fn on each of the items. <ul><li><code>.for_each(&lt;fn identifier: string&gt;)</code>: Uses the named fn.</li><li><code>.for_each(&lt;fn literal&gt;)</code>: Uses the provided fn.</li><li>Exactly the same as <code>.map()</code>, except that it does not return a new array. Return values from the fn, if any, are discarded.</li></ul></li></ul></li></ul><p><strong>Bytecode actions</strong>:</p><ul><li><code>ARRAY_PUSH_FROM_VALUE</code></li><li><code>ARRAY_PUSH_FROM_VARIABLE</code></li><li><code>ARRAY_PUSH_LEFT_FROM_VALUE</code></li><li><code>ARRAY_PUSH_LEFT_FROM_VARIABLE</code></li></ul><h2 id="assign-array-value-at-index" tabindex="-1">Assign Array Value at Index <a class="header-anchor" href="#assign-array-value-at-index" aria-label="Permalink to “Assign Array Value at Index”">​</a></h2><p>Can be used as part of an int assignment operation: <code>&lt;LHS&gt; = &lt;RHS: int expression&gt;;</code></p><ul><li><strong>Syntax</strong>: <code>&lt;array name: string&gt;[&lt;int expression&gt;]</code></li><li><strong>Bytecode actions</strong>: <ul><li><code>ARRAY_WRITE_INTO_INDEX_FROM_VALUE</code></li><li><code>ARRAY_WRITE_INTO_INDEX_FROM_VARIABLE</code></li></ul></li></ul>`,34)])])}const u=a(r,[["render",n]]);export{g as __pageData,u as default};
