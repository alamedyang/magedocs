import{_ as i,c as a,o as t,ah as l}from"./chunks/framework.l_r_SdPt.js";const m=JSON.parse('{"title":"General Process","description":"","frontmatter":{},"headers":[],"relativePath":"general_process.md","filePath":"general_process.md"}'),o={name:"general_process.md"};function r(s,e,n,c,h,d){return t(),a("div",null,[...e[0]||(e[0]=[l('<h1 id="general-process" tabindex="-1">General Process <a class="header-anchor" href="#general-process" aria-label="Permalink to “General Process”">​</a></h1><p>An example production pipeline. The exact order can vary a bit, and previous steps might be revisited at any point.</p><h2 id="entities" tabindex="-1">Entities <a class="header-anchor" href="#entities" aria-label="Permalink to “Entities”">​</a></h2><p>Prepare entities. For each entity:</p><ol><li>Acquire or produce <a href="./tilesets.html">spritesheets</a>.</li><li>In Tiled, <a href="./tilesets.html#creating-a-tileset-json-file">make a tileset JSON file</a>. <ol><li>Put it in <code>scenario_source_files/entities/</code>.</li><li>For <a href="./entity_types.html#character-entity">character entities</a>, set the <code>Class</code> property for all tiles to what you want the entity&#39;s <code>entity_type</code> name to be.</li><li>Set frames and timings for your <a href="./animations.html">animations</a>, if any. <ol><li>For <a href="./entity_types.html#character-entity">character entities</a>, prepare <a href="./animations.html">animations</a> for at least idle, walking, and action.</li></ol></li></ol></li><li>For each <a href="./entity_types.html#character-entity">character entities</a>: <ol><li>Use the <a href="./encoder.html#web-encoder">web encoder</a> to <a href="./entity_management_system.html">assign animations and NSEW directions</a>.</li><li>Paste updated entity data into <code>entity_types.json</code>.</li></ol></li><li>Prepare dialog portraits. <ol><li>In Tiled, <a href="./tilesets.html#creating-a-tileset-json-file">make a tileset JSON file</a> for the talk portrait images. <ol><li>Put it in <code>scenario_source_files/entities/</code>.</li></ol></li><li>Prepare <code>portraits.json</code>.</li><li>Assign portraits to their entities in <code>entity_types.json</code> if the portrait name does not match an <a href="./entity_types.html#character-entity">entity_type</a> name.</li></ol></li></ol><h2 id="maps" tabindex="-1">Maps <a class="header-anchor" href="#maps" aria-label="Permalink to “Maps”">​</a></h2><p>Prepare map(s). For each map:</p><ol><li>Acquire or produce <a href="./tilesets.html">tilesets</a>.</li><li>In Tiled, <a href="./tilesets.html#creating-a-tileset-json-file">make a tileset JSON file</a>. <ol><li>Put it in <code>scenario_source_files/tilesets/</code>.</li><li>Set <a href="./tilesets.html#tile-collisions">tile collisions</a> for each tile.</li></ol></li><li>In Tiled, <a href="./maps.html#creating-a-map-json-file">create a map</a> using the tileset(s) from above.</li><li>Place entities on the map. <ol><li>Set <a href="./entities.html#entity-properties">entity properties</a> e.g. <ol><li><code>Name</code></li><li><code>is_player</code></li><li><code>on_tick</code> script</li><li><code>on_interact</code> script</li><li><code>on_look</code> script</li></ol></li></ol></li><li><a href="./vector_objects.html">Draw vector shapes</a>, e.g. <ol><li>Walk paths</li><li>Doorways</li><li>&quot;Walking out the door&quot; paths</li><li>Camera targets</li></ol></li><li>Add the map to <code>maps.json</code>, and supply properties like its <code>on_load</code> and <code>on_tick</code> scripts.</li></ol><h2 id="dialog-skins" tabindex="-1">Dialog Skins <a class="header-anchor" href="#dialog-skins" aria-label="Permalink to “Dialog Skins”">​</a></h2><p>Prepare dialog skin(s). For each skin:</p><ol><li>Acquire or produce <a href="./tilesets.html">tilesets</a>.</li><li>In Tiled, <a href="./tilesets.html#creating-a-tileset-json-file">make a tileset JSON file</a>. <ol><li>Put it in <code>scenario_source_files/tilesets/</code>.</li></ol></li><li>Add dialogSkin file(s) to <code>scenario.json</code>.</li></ol><h2 id="game-logic" tabindex="-1">Game Logic <a class="header-anchor" href="#game-logic" aria-label="Permalink to “Game Logic”">​</a></h2><p>Prepare game behavior.</p><ol><li>Write MGS files for <a href="./scripts.html">scripts</a>, <a href="./dialogs.html">dialogs</a>, and <a href="./serial_dialogs.html">serial dialogs</a>.</li></ol><h2 id="encode-game" tabindex="-1">Encode Game <a class="header-anchor" href="#encode-game" aria-label="Permalink to “Encode Game”">​</a></h2><p>Encode the <code>game.dat</code> using the <a href="./encoder.html">encoder</a>.</p><h2 id="play-test" tabindex="-1">Play Test <a class="header-anchor" href="#play-test" aria-label="Permalink to “Play Test”">​</a></h2><p>Test the game in one of three ways:</p><ol><li><a href="./what_youll_need.html#web-build">Web build</a>: <ol><li>Remember to use the web build appropriate for the version of the encoder you&#39;re using!</li><li>Drag the new <code>game.dat</code> into the browser window.</li><li>Run the game.</li></ol></li><li><a href="./what_youll_need.html#desktop-build">Desktop build</a> (see <a href="./mge_vm.html">MGE VM</a>): <ol><li>Move <code>game.dat</code> to the right place.</li><li>Run the game.</li></ol></li><li>Verify on real badge hardware. See: <a href="./updating_the_hardware.html">Updating the Hardware</a><ol><li>Copy <code>game.dat</code> onto a microSD card.</li><li>Insert the microSD card into hardware.</li><li>Flash the game.</li><li>Run the game.</li></ol></li></ol><hr><p><a href="./index.html">Quick Links</a></p>',21)])])}const f=i(o,[["render",r]]);export{m as __pageData,f as default};
