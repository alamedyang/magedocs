import{_ as i,c as a,o as t,ah as n}from"./chunks/framework.l_r_SdPt.js";const c=JSON.parse('{"title":"JSON Literals","description":"","frontmatter":{},"headers":[],"relativePath":"json_literals.md","filePath":"json_literals.md"}'),e={name:"json_literals.md"};function l(r,s,p,h,o,k){return t(),a("div",null,[...s[0]||(s[0]=[n(`<h1 id="json-literals" tabindex="-1">JSON Literals <a class="header-anchor" href="#json-literals" aria-label="Permalink to “JSON Literals”">​</a></h1><p>Primarily used for unit tests (to allow action debugging separate from MGS debugging) and for trying out new actions before they are implemented in MGS. Use these inside a <a href="./scripts.html">script body</a>.</p><p><strong>Syntax</strong>: <code>json[&lt;comma-separated JSON objects&gt;] &lt;&quot;;&quot;?&gt;</code></p><div class="language-mgs"><button title="Copy Code" class="copy"></button><span class="lang">mgs</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#569CD6;--shiki-light:#0000FF;">script </span><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">json_example</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;"> {</span></span>
<span class="line"><span style="--shiki-dark:#DCDCAA;--shiki-light:#795E26;">	json</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">[</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">		{</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">			&quot;action&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;NON_BLOCKING_DELAY&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">			&quot;duration&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#B5CEA8;--shiki-light:#098658;">1000</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">		},</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">		{</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">			&quot;action&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;SHOW_DIALOG&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">			&quot;dialog&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;example&quot;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">		}</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">	];</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><ul><li>The keyword <code>json</code> is followed by a pair of matching square brackets, effectively a JSON array.</li><li>Each JSON object inside the top level array is a single <a href="./actions.html">bytecode instruction</a>.</li><li>These are added to the JSON output with no MGS interpretation or validation (apart from <code>COPY_SCRIPT</code>, which is handled on the MGS side for debugging reasons).</li><li>JSON literals must contain legal JSON. <ul><li>No trailing commas.</li><li>Property names must be wrapped in double quotes.</li></ul></li><li>Fun fact: the whole JSON array is not parsed as a single unit. Each interior action is parsed separately to allow for more granular error handling.</li></ul>`,5)])])}const g=i(e,[["render",l]]);export{c as __pageData,g as default};
