import{_ as t,c as i,o,ah as l}from"./chunks/framework.l_r_SdPt.js";const h=JSON.parse('{"title":"Commands","description":"","frontmatter":{},"headers":[],"relativePath":"commands.md","filePath":"commands.md"}'),a={name:"commands.md"};function r(n,e,s,d,c,m){return o(),i("div",null,[...e[0]||(e[0]=[l('<h1 id="commands" tabindex="-1">Commands <a class="header-anchor" href="#commands" aria-label="Permalink to “Commands”">​</a></h1><ul><li>Commands can be registered with <a href="./actions.html">actions</a> inside a <a href="./scripts.html">script body</a>, after which the player can type the command into the serial terminal to run a script.</li><li>The first word typed is considered to be the command itself, a.k.a. the <strong>verb</strong>. Everything afterward (even if it&#39;s multiple words) is considered to be the command&#39;s <strong>argument</strong>.</li><li>All command registrations are reset when a map is loaded.</li></ul><h2 id="interpretation" tabindex="-1">Interpretation <a class="header-anchor" href="#interpretation" aria-label="Permalink to “Interpretation”">​</a></h2><ul><li>Words are split by whitespace when interpreted. The number of spaces does not matter. <code>GO NORTH</code> is equivalent to <code>GO NORTH</code>.</li><li>Case is ignored. <code>go north</code> is equivalent to <code>GO NORTH</code> and <code>gO nOrTh</code>.</li><li>The second word in a command is ignored if it is &quot;AT&quot; or &quot;TO&quot;. <code>LOOK AT BOB</code> is equivalent to <code>LOOK BOB</code></li><li>Non-ASCII characters are not explicitly handled, so the MGE may interpret complex characters as one (or more) entirely different characters.</li></ul><h2 id="default-commands" tabindex="-1">Default Commands <a class="header-anchor" href="#default-commands" aria-label="Permalink to “Default Commands”">​</a></h2><ul><li>These commands are built into the MGE.</li><li>Importantly, none of these default command verbs are reserved, so you may register custom arguments, e.g. <code>GO DENNIS</code> for a map without a &quot;DENNIS&quot; exit. Just know that these custom registrations will not appear in the list of exits provided by LOOK.</li><li>A map&#39;s exits and script slots are defined in the map&#39;s <code>maps.json</code> definition.</li><li><strong><code>HELP</code></strong>: lists all commands that are currently registered, except for commands that have been hidden. Command aliases are not listed.</li><li><strong><code>LOOK</code></strong>: Runs the current map&#39;s <code>on_look</code> script, then prints the names of exits associated with that map.</li><li><strong><code>LOOK</code> + <code>&lt;entity&#39;s current name&gt;</code></strong>: Runs the script in that entity&#39;s <code>on_look</code> slot. <ul><li>The current name is the entity&#39;s name in RAM at the moment, not the entity&#39;s original name when the map was first loaded.</li></ul></li><li><strong><code>GO</code> + <code>&lt;name of exit&gt;</code></strong>: Runs the script associated with that exit name for that map. <ul><li>Abbreviations of the cardinal directions are built into GO, so <code>GO N</code> will try to run <code>GO NORTH</code>. This also applies to the diagonals, e.g. <code>GO SW</code> for <code>GO SOUTHWEST</code>.</li></ul></li></ul><h2 id="command-actions" tabindex="-1">Command Actions <a class="header-anchor" href="#command-actions" aria-label="Permalink to “Command Actions”">​</a></h2><p>#todo format like the other actions</p><ul><li><strong>Register</strong>: <ul><li><strong>Verb</strong>: <ul><li><code>command &lt;verb: string[]&gt; = &lt;script name: string[]&gt;;</code></li><li><code>command &lt;verb: string[]&gt; = &lt;script literal&gt;;</code></li></ul></li><li><strong>Argument for verb</strong>: <ul><li><code>command &lt;verb: string[]&gt; + &lt;argument: string[]&gt; = &lt;script name: string[]&gt;;</code></li><li><code>command &lt;verb: string[]&gt; + &lt;argument: string[]&gt; = &lt;script literal&gt;;</code></li><li>Arguments that are multiple words should be wrapped in double quotes.</li></ul></li><li><strong>Fail for verb</strong>: For when an invalid argument is used with that verb. <ul><li><code>command &lt;verb: string[]&gt; fail = &lt;script name[]&gt;;</code></li><li><code>command &lt;verb: string[]&gt; fail = &lt;script literal&gt;;</code></li></ul></li></ul></li><li><strong>Unregister</strong>: <ul><li><strong>Verb</strong>: <ul><li>`delete command &lt;verb: string[]&gt;;</li></ul></li><li><strong>Argument for verb</strong>: <ul><li><code>delete command &lt;verb: string[]&gt; + &lt;argument: string[]&gt;;</code></li></ul></li><li><strong>Fail for verb</strong>: <ul><li><code>delete command &lt;verb: string[]&gt; fail;</code></li></ul></li></ul></li><li><strong>Hide or unhide</strong>: hides or unhides a verb from the <strong><code>HELP</code></strong> list: <ul><li><code>hide command &lt;verb: string[]&gt;;</code></li><li><code>unhide command &lt;verb: string[]&gt;;</code></li></ul></li></ul><p><strong>Bytecode actions</strong>:</p><ul><li><code>REGISTER_SERIAL_DIALOG_COMMAND</code></li><li><code>UNREGISTER_SERIAL_DIALOG_COMMAND</code></li><li><code>REGISTER_SERIAL_DIALOG_COMMAND_ARGUMENT</code></li><li><code>UNREGISTER_SERIAL_DIALOG_COMMAND_ARGUMENT</code></li><li><code>SET_SERIAL_DIALOG_COMMAND_VISIBILITY</code></li><li><code>REGISTER_SERIAL_DIALOG_COMMAND_ALIAS</code></li><li><code>UNREGISTER_SERIAL_DIALOG_COMMAND_ALIAS</code></li></ul><h2 id="aliases" tabindex="-1">Aliases <a class="header-anchor" href="#aliases" aria-label="Permalink to “Aliases”">​</a></h2><ul><li>An alias is an alternative reference to a command registration. <ul><li>Usually these are abbreviations, such as registering the alias <code>i</code> for the command verb <code>inventory</code>.</li></ul></li><li>Aliases are not printed in the command list provided by <strong><code>HELP</code></strong>.</li><li><strong>Create alias</strong>: <ul><li><code>alias &lt;string[]&gt; = &lt;command: string[]&gt;;</code></li></ul></li><li><strong>Delete alias</strong>: <ul><li><code>delete alias &lt;string[]&gt;;</code></li></ul></li></ul>',13)])])}const u=t(a,[["render",r]]);export{h as __pageData,u as default};
