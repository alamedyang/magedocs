import{_ as t,c as a,o as i,ah as n,al as o,am as r,an as l,ao as s}from"./chunks/framework.l_r_SdPt.js";const u=JSON.parse('{"title":"Entity Types","description":"","frontmatter":{},"headers":[],"relativePath":"entity_types.md","filePath":"entity_types.md"}'),c={name:"entity_types.md"};function h(d,e,p,y,m,f){return i(),a("div",null,[...e[0]||(e[0]=[n('<h1 id="entity-types" tabindex="-1">Entity Types <a class="header-anchor" href="#entity-types" aria-label="Permalink to “Entity Types”">​</a></h1><p>In the MGE, there are three types of <a href="./entities.html">entities</a>. Each has a <code>primary_id_type</code> (determined by the type of tile being placed):</p><ul><li><code>0</code> = <a href="#tile-entity">tile</a> (<code>tileset</code>)</li><li><code>1</code> = <a href="#animation-entity">animation</a> (<code>animation</code>)</li><li><code>2</code> = <a href="#character-entity">character</a> (<code>entity_type</code>)</li></ul><p>For the first two types (tile and animation), the tile will rotate when the entity changes which direction it is &quot;facing,&quot; whereas the last type (character) will instead choose the correct <a href="./animations.html">animation</a> among those it was <a href="./entity_management_system.html">assigned</a> (north, south, east, or west). Therefore entities that are meant to have standard character animations (like the sheep below) or that need to retain their appearance when moving around the <a href="./maps.html">map</a> (like the rake below) <em>must</em> be the third type.</p><table tabindex="0"><thead><tr><th style="text-align:left;">Rotating Tiles</th><th style="text-align:left;">Assigned Animations</th></tr></thead><tbody><tr><td style="text-align:left;">sheep (animation)</td><td style="text-align:left;">sheep (character)</td></tr><tr><td style="text-align:left;"><img src="'+o+'" alt="rotating rake"></td><td style="text-align:left;"><img src="'+r+'" alt="stable rake"></td></tr><tr><td style="text-align:left;">rake (tile)</td><td style="text-align:left;">rake (character)</td></tr><tr><td style="text-align:left;"><img src="'+l+'" alt="rotating rake"></td><td style="text-align:left;"><img src="'+s+'" alt="stable rake"></td></tr></tbody></table><p>In addition, there is currently no way to control animations with scripts unless the entity is a character entity. (See the the modem and bookcase in Chapter 1 of the Black Mage Game.)</p><h2 id="tile-entity" tabindex="-1">Tile Entity <a class="header-anchor" href="#tile-entity" aria-label="Permalink to “Tile Entity”">​</a></h2><p>If you place a static (unanimated) tile from a <a href="./tilesets.html">tileset</a> onto an object layer in a Tiled <a href="./maps.html">map</a>, it will become a <strong>tile entity</strong>.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>If the tile&#39;s <code>Class</code> property is defined within <code>entity_types.json</code>, it will instead become a <a href="#character-entity">character entity</a>.</p></div><ul><li><strong><code>primary_id_type</code></strong>: <code>0</code> (<code>tileset</code>)</li><li><strong><code>primary_id</code></strong>: the <code>id</code> of the tileset the entity is using</li><li><strong><code>secondary_id</code></strong>: the <code>id</code> of the tile on the tileset (the Nth tile, counting left to right and top to down, 0-indexed)</li></ul><p>These are a simple way of making props interactable.</p><p>If you don&#39;t want an interactable prop to be be Y-indexed with other entities when drawn, you could instead put the prop in the map geometry itself and create a <a href="#null-entity">&quot;null entity&quot;</a> for the interactable aspects.</p><h3 id="null-entity" tabindex="-1">Null Entity <a class="header-anchor" href="#null-entity" aria-label="Permalink to “Null Entity”">​</a></h3><p>A null entity is a <a href="#tile-entity">tile entity</a> whose tile is entirely transparent. They&#39;re useful for implementing scripting behaviors not directly supported by the MGE, such as having an entity procedurally chase a moving (invisible) target.</p><p>A common use is to enable interaction behavior for things that aren&#39;t themselves entities. To do this, place a null entity on the map wherever you want interaction behavior to happen, then use the null entity&#39;s <code>on_interact</code> script slot for the interaction behavior.</p><p><strong>Disadvantages</strong>: The null entity can be hacked into another tile (presumably one with pixel data), in which case a new object will seemingly appear out of nowhere.</p><p>You cannot click on transparent pixels in Tiled. To select a null entity, you&#39;ll need to use the Layers pallet. To move one, change its X and Y values in the properties pane once you&#39;ve selected it.</p><h2 id="animation-entity" tabindex="-1">Animation Entity <a class="header-anchor" href="#animation-entity" aria-label="Permalink to “Animation Entity”">​</a></h2><p>If you place a animated tile from a <a href="./tilesets.html">tileset</a> onto an object layer in a Tiled <a href="./maps.html">map</a>, it will become an <strong>animation entity</strong>.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>If the tile&#39;s <code>Class</code> property is defined within <code>entity_types.json</code>, it will instead become a <a href="#character-entity">character entity</a>.</p></div><ul><li><strong><code>PrimaryIdType</code></strong>: <code>1</code> (<code>animation</code>)</li><li><strong><code>PrimaryId</code></strong>: the <code>id</code> of the animation the entity is playing</li><li><strong><code>SecondaryId</code></strong>: does nothing</li></ul><p>When the game is <a href="./encoder.html">encoded</a>, all animations are shoved together into a single list, so the <code>id</code> for <code>PrimaryId</code> is regularly subject to change. Therefore, you will never want to use the <code>PrimaryId</code> to choose a specific animation.</p><p>Animation entities are most useful for animated props, e.g. a water fountain, a torch flickering on a wall, a birthday cake with a moving candle flame. Such entities need not use any of the <a href="./entities.html#entity-properties">entity properties</a> available to them, though they could.</p><p>While NPCs will likely need to be character entities, simpler ones might work perfectly well as animation entities, e.g. WOPR in the Black Mage Game.</p><h2 id="character-entity" tabindex="-1">Character Entity <a class="header-anchor" href="#character-entity" aria-label="Permalink to “Character Entity”">​</a></h2><p>If you place a tile onto an object layer, and the <code>Class</code> (formerly <code>Type</code>) property of the tile has been defined in <code>entity_types.json</code>, it will become an <strong>character entity</strong>.</p><ul><li><strong><code>PrimaryIdType</code></strong>: <code>2</code> (<code>entity_type</code>)</li><li><strong><code>PrimaryId</code></strong>: the <code>id</code> of the entity within <code>entity_types.json</code></li><li><strong><code>SecondaryId</code></strong>: does nothing</li></ul><p>You need not manipulate <code>PrimaryId</code> to alter the appearance of a character entity. Instead, you can use <a href="./actions.html">actions</a> that change the <code>entity_type</code> value to one of the ones defined within <code>entity_types.json</code>.</p><p>What&#39;s special about character entities is that they can have a number of <a href="./animations.html">animations</a>(animations) <a href="./entity_management_system.html">assigned</a> to them and they will switch animations automatically depending on context (walking or not, facing north/south/east/west, etc.), as well as having other attributes, like a default portrait image. <strong>NPCs will therefore likely be this type.</strong></p><p>In the MGE, character entities will default to their idle animation regardless of the tile that was placed Tiled. (I.e. if you use a &quot;walking animation&quot; tile for the entity on the Tiled map, the entity will appear to be walking in Tiled, but not within the MGE.)</p><p>Character entities will face the north by default, but if the tile placed has been <a href="./entity_management_system.html">assigned to a NSEW direction and a purpose</a>, the entity will instead face the direction associated with that tile&#39;s assignment.</p>',31)])])}const b=t(c,[["render",h]]);export{u as __pageData,b as default};
