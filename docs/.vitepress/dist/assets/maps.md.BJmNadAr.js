import{_ as a,c as t,o as i,ah as s}from"./chunks/framework.l_r_SdPt.js";const m=JSON.parse('{"title":"Maps","description":"","frontmatter":{},"headers":[],"relativePath":"maps.md","filePath":"maps.md"}'),o={name:"maps.md"};function l(n,e,r,h,p,d){return i(),t("div",null,[...e[0]||(e[0]=[s(`<h1 id="maps" tabindex="-1">Maps <a class="header-anchor" href="#maps" aria-label="Permalink to “Maps”">​</a></h1><h2 id="creating-a-map-json-file" tabindex="-1">Creating a Map JSON File <a class="header-anchor" href="#creating-a-map-json-file" aria-label="Permalink to “Creating a Map JSON File”">​</a></h2><p>Within Tiled:</p><ol><li>Go to &quot;File &gt; New Map…&quot;</li><li>Set the following properties: <ul><li>Orientation: Orthogonal</li><li>Tile layer format: CSV</li><li>Tile render order: Right Down</li></ul></li><li>Map size can be changed later, so don&#39;t worry about setting it correctly right now. <ul><li>The map size limit for the MGE is quite large. Don&#39;t worry about surpassing this limit.</li></ul></li><li>For Tile size, use the tile size for the tileset you intend to use for this map. (Black Mage Game tilesets are 32x32.)</li><li>Save the map file: <ul><li>Set the format to JSON.</li><li>Make sure the file name ends with <code>.json</code>.</li><li>Set the correct destination folder: <code>scenario_source_files/maps/</code>. (Careful, as Tiled will default to the file path of the last file currently open. You don&#39;t want to move this file later!)</li></ul></li></ol><p>You will be using the Tileset view a lot when working on a map, which you can make visible (if invisible) via &quot;View &gt; View and Toolbars &gt; Tileset.&quot;</p><p>For MGE maps, you&#39;ll be using <a href="#tile-layers">tile layers</a> and <a href="#object-layers">object layers</a> alone.</p><h2 id="tile-layers" tabindex="-1">Tile Layers <a class="header-anchor" href="#tile-layers" aria-label="Permalink to “Tile Layers”">​</a></h2><p>Placing tiles is fairly intuitive, but know that you can press <strong>X</strong> to flip and <strong>Z</strong> to rotate a tile you are about to place. See <a href="https://doc.mapeditor.org/en/stable/manual/editing-tile-layers/" target="_blank" rel="noreferrer">Tiled&#39;s documentation</a> for more information.</p><p>In the MGE, the topmost tile layer is drawn on top of entities. All others are drawn underneath. (Entities themselves are Y-indexed when drawn.)</p><div class="warning custom-block"><p class="custom-block-title">Appearance in Tiled vs MGE</p><p>Animations placed on a tile layer will <em>not</em> play back within the MGE, regardless of how things may appear within Tiled.</p><p>Similarly, placing a tile of the incorrect size on a map will result in divergent behavior between Tiled and the MGE. Make sure all tiles placed are the same size as the map&#39;s tileset size.</p></div><h3 id="mge-tile-layer-considerations" tabindex="-1">MGE Tile Layer Considerations <a class="header-anchor" href="#mge-tile-layer-considerations" aria-label="Permalink to “MGE Tile Layer Considerations”">​</a></h3><p>Each additional layer adds overhead to the draw time. Currently, it&#39;s recommended to limit tile layers to three or less: one for the top (to appear above entities), and one or two for underneath (to appear below entities).</p><p>For the Black Mage Game, we use two base layers: one for the base terrain, and one for terrain doodads with alpha.</p><p>In addition, because each tile increases the draw time, it&#39;s best to remove tiles that are completely obscured by fully opaque tiles.</p><h2 id="object-layers" tabindex="-1">Object Layers <a class="header-anchor" href="#object-layers" aria-label="Permalink to “Object Layers”">​</a></h2><p>Vector polygons and points are placed on object layers, but tiles can be placed this way, too, if you use the &quot;Insert Tile&quot; button on the vector section of the toolbar (shortcut <strong>T</strong>) — and this is how entities are added to a map.</p><p>Vector objects are susceptible to <a href="./vector_objects.html#coordinate-overflow">coordinate overflow</a>, so try to keep objects and all their vertices inside the map coordinate space (unless you actually want to yeet an entity to outer space).</p><div class="tip custom-block"><p class="custom-block-title">Best Practice</p><p>Particularly on maps with a lot going on, it&#39;s best to place objects on separate layers so you can easily hide or reveal specific objects, e.g.:</p><ul><li>the entities themselves</li><li>door and exit paths</li><li>cutscene paths and camera points</li></ul><p>It doesn&#39;t matter how many layers there are in terms of accommodating the <a href="./encoder.html">encoder</a>, but it&#39;s best to place the layer for entities just below the topmost tile layer, at least, for the most accurate visual preview.</p></div><h3 id="placing-entities" tabindex="-1">Placing Entities <a class="header-anchor" href="#placing-entities" aria-label="Permalink to “Placing Entities”">​</a></h3><p>Entities are placed as tiles on an object layer with the &quot;Insert Tile&quot; button (shortcut <strong>T</strong>). The <a href="./entity_types.html">type of entity</a> placed and a few of its <a href="./entities.html#entity-properties">entity properties</a> are determined by which tile you use, but other entity properties must be explicitly set.</p><p>Entities are Y-indexed in the MGE, meaning they are rendered in front of or behind other entities according to their Y position. For entities being used as environment props, this can result in odd behavior (e.g. the player appearing underneath a bundle of cables if they walk too far behind it).</p><p>Each map can have a maximum of 64 entities.</p><h2 id="map-properties" tabindex="-1">Map Properties <a class="header-anchor" href="#map-properties" aria-label="Permalink to “Map Properties”">​</a></h2><p>Map properties reside either inside <code>maps.json</code> (preferred) or inside a JSON map file (legacy). (To see the map&#39;s properties within Tiled, go to &quot;Map &gt; Map Properties….&quot;)</p><p>Example <code>maps.json</code>:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes dark-plus light-plus" style="--shiki-dark:#D4D4D4;--shiki-light:#000000;--shiki-dark-bg:#1E1E1E;--shiki-light-bg:#FFFFFF;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">{</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">  &quot;sample1&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">    &quot;path&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;maps/map-sample1.json&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">    &quot;on_load&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;on_load-sample&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">    &quot;on_look&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;on_look-sample&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">    &quot;on_tick&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;on_tick-sample&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">    &quot;directions&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">      &quot;north&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;on_go-sample-map&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">,</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">      &quot;south&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;on_go-sample-map&quot;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">    }</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">  },</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">  &quot;sample2&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: {</span></span>
<span class="line"><span style="--shiki-dark:#9CDCFE;--shiki-light:#0451A5;">    &quot;path&quot;</span><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">: </span><span style="--shiki-dark:#CE9178;--shiki-light:#A31515;">&quot;maps/map-sample2.json&quot;</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">  }</span></span>
<span class="line"><span style="--shiki-dark:#D4D4D4;--shiki-light:#000000;">}</span></span></code></pre></div><ul><li><code>path</code><ul><li>Where the map JSON file is located and what it&#39;s called.</li></ul></li><li><code>on_load</code><ul><li>The script that plays when the map is first loaded. This script will only run once.</li><li>This is best used for checking <a href="./state.html#save-flags">save flags</a> and restoring state that is meant to be permanently changed.</li></ul></li><li><code>on_tick</code><ul><li>This script will execute, allow all other scripts to take a turn, and then execute again on the next game tick.</li><li>Because the player cannot use the <a href="./hex_editor.html">hex editor</a> to directly alter which script is run in a map&#39;s <code>on_tick</code> slot like they can an entity&#39;s <code>on_tick</code> slot, this slot is fairly well protected. This is useful for doors.</li></ul></li><li><code>on_look</code><ul><li>This script plays when you run the <strong><code>LOOK</code></strong> <a href="./commands.html">command</a> in the <a href="./terminal.html">terminal</a> without any arguments.</li><li>You can override this script if you register a <strong><code>LOOK</code></strong> command manually.</li></ul></li><li><code>directions</code><ul><li>These scripts run when the command <strong><code>GO</code></strong> is run with the named argument, e.g. <code>go north</code>.</li><li>These directions will be listed after a maps <code>on_look</code> script is executed (e.g. <code>exits are...</code>). Unfortunately, this can result in confusion if you want multiple names per exit (e.g. <code>go north</code> and <code>go tunnel</code>), so here you should only include directions you want explicitly printed, and use manual <a href="./commands.html">command</a> registrations for everything else.</li></ul></li></ul><h2 id="map-loads" tabindex="-1">Map Loads <a class="header-anchor" href="#map-loads" aria-label="Permalink to “Map Loads”">​</a></h2><p>The first map listed in <code>maps.json</code> is the map the game will load when first turned on.</p><p>Maps can be assigned an <code>on_load</code> <a href="./scripts.html">script</a>, which will run once when a map is loaded.</p><h3 id="to-reload-the-current-map" tabindex="-1">To Reload the Current Map <a class="header-anchor" href="#to-reload-the-current-map" aria-label="Permalink to “To Reload the Current Map”">​</a></h3><p>Do one of the following to reload the current map:</p><ol><li>Toggle <a href="./debug_tools.html#debug-mode">debug mode</a>: <code>XOR</code> + <code>MEM1</code> (or <code>F1</code> + <code>F6</code> on desktop)</li><li>Soft reset current map: <code>XOR</code> + <code>MEM3</code> (or <code>F1</code> + <code>F8</code> on desktop)</li><li>Target the current map with <a href="./actions.html#load-map">Load Map</a>. (This behavior is equivalent to #2)</li></ol><p>Note that turning on <a href="./debug_tools.html#vector-view">vector view</a> does not reload the map.</p><h3 id="persistent-state" tabindex="-1">Persistent State <a class="header-anchor" href="#persistent-state" aria-label="Permalink to “Persistent State”">​</a></h3><p><a href="./state.html#save-data">Save data</a>, including the player name, is preserved between map loads.</p><p><a href="./arrays.html">Arrays</a> and their values persist.</p><h3 id="state-not-persistent" tabindex="-1">State Not Persistent <a class="header-anchor" href="#state-not-persistent" aria-label="Permalink to “State Not Persistent”">​</a></h3><p>All <a href="./entities.html#entity-properties">entity state</a> is reset (apart from the player name). This includes every entity&#39;s appearance, script slots (both their script assignments and their progress within their scripts), and location.</p><p>All registered <a href="./terminal.html">terminal</a> <a href="./commands.html">commands</a> are reset. For a command that needs to persist throughout the game, you must initialize them afresh at the beginning of the map load. (We recommend using <a href="./macros.html#copy-script">Copy Script</a> on a separate map initialization script so that such logic checks can be shared between all relevant maps.)</p>`,40)])])}const u=a(o,[["render",l]]);export{m as __pageData,u as default};
